<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0x5e的博客</title>
  
  <subtitle>A salty fish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.0x5e.cn/"/>
  <updated>2019-03-15T09:22:40.642Z</updated>
  <id>https://blog.0x5e.cn/</id>
  
  <author>
    <name>0x5e</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SPA性能优化实践</title>
    <link href="https://blog.0x5e.cn/2018/02/03/spa-optimize/"/>
    <id>https://blog.0x5e.cn/2018/02/03/spa-optimize/</id>
    <published>2018-02-03T14:00:00.000Z</published>
    <updated>2019-03-15T09:22:40.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码体积优化"><a href="#代码体积优化" class="headerlink" title="代码体积优化"></a>代码体积优化</h1><h2 id="代码分割（Code-Splitting）"><a href="#代码分割（Code-Splitting）" class="headerlink" title="代码分割（Code Splitting）"></a>代码分割（Code Splitting）</h2><p>代码分割可以拆分业务模块和三方模块，在版本迭代时降低三方模块的更新频率，还可以实现资源文件按需加载，加快应用首屏加载速度。</p><h3 id="业务代码拆分"><a href="#业务代码拆分" class="headerlink" title="业务代码拆分"></a>业务代码拆分</h3><p>在开发以及版本迭代的过程中，三方模块很少有变化，可以拆分出来，通过浏览器缓存，加快新版应用的载入速度。</p><a id="more"></a><p>1.在<code>webpack.config.js</code>定义多个entry入口：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// entry: './index.js',</span></span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: <span class="string">'./index.js'</span>,</span><br><span class="line">        vendor: [</span><br><span class="line">            <span class="string">'react'</span>,</span><br><span class="line">            <span class="string">'react-router'</span>,</span><br><span class="line">            <span class="string">'moment'</span>,</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>vendor可以手动指定，也可以把<code>package.json</code>里的<code>dependencies</code>全部加入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vendor: [</span><br><span class="line">    ...Object.keys(path.resolve(<span class="string">'./package.json'</span>).dependencies),</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>设置完以后，打包出来的<code>main.js</code>包含业务+公共代码，<code>vendor.js</code>包含公共代码。</p><p>2.使用<code>CommonsChunkPlugin</code>插件，指定vendor为公共模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">    plugins: &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">            names: [<span class="string">'vendor'</span>, <span class="string">'manifest'</span>],</span><br><span class="line">        &#125;),</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>manifest是webpack的运行时模块，会随业务代码而改变，需要与公共模块分离。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">172.6 KB (-150.45 KB)  build/static/js/main.6b091018.js</span><br><span class="line">145.54 KB              build/static/js/vendor.5e7317a1.js</span><br><span class="line">35.39 KB               build/static/css/main.6123c843.css</span><br><span class="line">835 B                  build/static/js/manifest.24abdf54.js</span><br></pre></td></tr></table></figure><p>可以看到main文件拆分后，减少了将近一半的体积。<code>vendor.[hash].js</code>被浏览器缓存，因为更变不频繁，这部分代码很大概率不需要重复下载了。</p><h3 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h3><p>当SPA应用包含了多个页面的时候，首屏页面代码是必须被加载的，而其他页面并不一定会去访问，因此这部分代码并不是必须的，可以按需加载。</p><p>webpack提供了<code>import()</code>方法在运行时动态加载ES Module，返回一个Promise对象。</p><p>配合react-router可以做如下改动：</p><p>改动前：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Router, Switch &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Task <span class="keyword">from</span> <span class="string">'./task'</span>;</span><br><span class="line"><span class="keyword">import</span> Mall <span class="keyword">from</span> <span class="string">'./mall'</span>;</span><br><span class="line"><span class="keyword">import</span> My <span class="keyword">from</span> <span class="string">'./my'</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;Switch&gt;</span><br><span class="line">      &lt;Route exact path=<span class="string">'/task'</span> component=&#123;Task&#125; /&gt;</span><br><span class="line">      &lt;Route exact path=<span class="string">'/mall'</span> component=&#123;Mall&#125; /&gt;</span><br><span class="line">      &lt;Route exact path=<span class="string">'/my'</span> component=&#123;My&#125; /&gt;</span><br><span class="line">      &#123;<span class="comment">/* ... */</span>&#125;</span><br><span class="line">    &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>Router&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>改动后：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Switch &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> asyncComponent = <span class="function">(<span class="params">importComponent</span>) =&gt;</span> (</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">AsyncComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">      component: <span class="literal">null</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> componentDidMount() &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; <span class="attr">default</span>: component &#125; = <span class="keyword">await</span> importComponent();</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; component &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> C = <span class="keyword">this</span>.state.component</span><br><span class="line">      <span class="keyword">return</span> C</span><br><span class="line">        ? &lt;C &#123;...this.props&#125; /&gt;</span><br><span class="line">        : null</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">export default () =&gt; (</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;Switch&gt;</span><br><span class="line">      &lt;Route exact path='/task' component=&#123;asyncComponent(() =&gt; import(/* webpackChunkName: 'task' */ './task'))&#125; /&gt;</span><br><span class="line">      &lt;Route exact path='/mall' component=&#123;asyncComponent(() =&gt; import(/* webpackChunkName: 'mall' */ './mall'))&#125; /&gt;</span><br><span class="line">      &lt;Route exact path='/my' component=&#123;asyncComponent(() =&gt; import(/* webpackChunkName: 'my' */ './my'))&#125; /&gt;</span><br><span class="line">      &#123;/* ... */&#125;</span><br><span class="line">    &lt;/Switch&gt;</span><br><span class="line">  &lt;/Router&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>将每个页面从<code>import Page from &#39;./path/to/page&#39;</code>的同步加载改为<code>() =&gt; import(&#39;./path/to/page)</code>异步加载，加载完毕后再渲染到页面上。</p><p>webpack会对这种加载方式进行优化，每个页面的代码打包成单独的文件，在需要时按需加载。文件名称通过<code>import()</code>参数中写注释指定。例如<code>/* webpackChunkName: &#39;xxx&#39; */</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">144.68 KB (-873 B)    build/static/js/vendor.dd6678e3.js</span><br><span class="line">48.2 KB               build/static/js/task.4ef57338.chunk.js</span><br><span class="line">44.74 KB              build/static/js/mall.3f31508b.chunk.js</span><br><span class="line">40.02 KB              build/static/js/my.16e54bab.chunk.js</span><br><span class="line">13.73 KB (-21.67 KB)  build/static/css/main.c8a90ac2.css</span><br><span class="line">9.05 KB (-163.55 KB)  build/static/js/main.b7f8610d.js</span><br><span class="line">1.19 KB (+383 B)      build/static/js/manifest.7d1798c7.js</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p>main.js从170k变成了9k，访问<code>/my</code>页面时所需的代码文件体积从170k变成了9k+40k，减少了约70%的体积。</p><h1 id="资源文件优化"><a href="#资源文件优化" class="headerlink" title="资源文件优化"></a>资源文件优化</h1><p>图片：</p><ul><li>图标用css、svg、iconfont代替</li><li>渐进式图片加载</li><li>访问oss的图片资源带上参数（比如运营同学上传了几十张超清大图。。。）</li><li>图片懒加载</li></ul><h1 id="服务端优化"><a href="#服务端优化" class="headerlink" title="服务端优化"></a>服务端优化</h1><ul><li>启用gzip压缩（很简单，效果也很明显）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">##</span><br><span class="line"># Gzip Settings</span><br><span class="line">##</span><br><span class="line">gzip on;</span><br><span class="line">gzip_vary on;</span><br><span class="line">gzip_min_length 10k;</span><br><span class="line">gzip_proxied expired no-cache no-store private auth;</span><br><span class="line">gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml application/javascript;</span><br><span class="line">gzip_disable &quot;MSIE [1-6]\.&quot;;</span><br></pre></td></tr></table></figure><ul><li>http2多路复用</li><li>开启HSTS</li><li>服务端渲染</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://blog.csdn.net/forAlienZHOU/article/details/73437057" target="_blank" rel="noopener">react-router 4 代码拆分</a><br><a href="https://zhuanlan.zhihu.com/p/26228500" target="_blank" rel="noopener">基于webpack Code Splitting实现react组件的按需加载</a><br><a href="https://github.com/mrdulin/blog/issues/43" target="_blank" rel="noopener">使用import()配合webpack动态导入模块时，如何指定chunk name</a><br><a href="https://segmentfault.com/a/1190000007141049" target="_blank" rel="noopener">react-router 按需加载</a><br><a href="https://segmentfault.com/a/1190000011128817" target="_blank" rel="noopener">webpack v3 结合 react-router v4 做 dynamic import — 按需加载（懒加载）</a><br><a href="https://medium.com/front-end-hacking/lazy-loading-with-react-and-webpack-2-8e9e586cf442" target="_blank" rel="noopener">Lazy Loading with React and Webpack 2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;代码体积优化&quot;&gt;&lt;a href=&quot;#代码体积优化&quot; class=&quot;headerlink&quot; title=&quot;代码体积优化&quot;&gt;&lt;/a&gt;代码体积优化&lt;/h1&gt;&lt;h2 id=&quot;代码分割（Code-Splitting）&quot;&gt;&lt;a href=&quot;#代码分割（Code-Splitting）&quot; class=&quot;headerlink&quot; title=&quot;代码分割（Code Splitting）&quot;&gt;&lt;/a&gt;代码分割（Code Splitting）&lt;/h2&gt;&lt;p&gt;代码分割可以拆分业务模块和三方模块，在版本迭代时降低三方模块的更新频率，还可以实现资源文件按需加载，加快应用首屏加载速度。&lt;/p&gt;
&lt;h3 id=&quot;业务代码拆分&quot;&gt;&lt;a href=&quot;#业务代码拆分&quot; class=&quot;headerlink&quot; title=&quot;业务代码拆分&quot;&gt;&lt;/a&gt;业务代码拆分&lt;/h3&gt;&lt;p&gt;在开发以及版本迭代的过程中，三方模块很少有变化，可以拆分出来，通过浏览器缓存，加快新版应用的载入速度。&lt;/p&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://blog.0x5e.cn/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Front-End" scheme="https://blog.0x5e.cn/tags/Front-End/"/>
    
  </entry>
  
  <entry>
    <title>给 npm package 打补丁</title>
    <link href="https://blog.0x5e.cn/2017/10/14/patch-npm-package/"/>
    <id>https://blog.0x5e.cn/2017/10/14/patch-npm-package/</id>
    <published>2017-10-14T14:50:32.000Z</published>
    <updated>2019-03-15T09:22:40.642Z</updated>
    
    <content type="html"><![CDATA[<p><del>用英文写了好久，实在是写不下去全删了，太蹩脚了哈哈哈哈</del></p><p>大家都知道 React Native 更新频率很快，这么久了也没有出稳定版，经常会有一些API的变动导致三方库不兼容新版本，这都是很常见的。比如0.47去除了Android的<code>createJSModules</code>方法，相对应的所有的三方库都得把这方法前面的<code>@Override</code>给去掉，不然就会编译失败了。</p><a id="more"></a><p>一般也就这么几个选项：</p><ol><li><p>提issue，等开发者更新代码</p><p> 如果碰上年久失修的三方库，无人维护怎么办呢，等更新要等到猴年马月，或者压根就再也不更新了。</p></li><li><p>fork项目，改一行，提交PR</p><p> 为了一行<code>@Override</code>，有点杀鸡用牛刀，项目依赖要先改成自己fork的项目，然后过n个礼拜，等开发者合并代码、提交npm之后，再把依赖改回来。还得把这事儿一直记着，没准就忘了呢。</p></li><li><p>直接改<code>npm_modules</code>目录下的代码</p><p> 这就更不靠谱了，一般都是在<code>.gitignore</code>里面忽略掉的，多人合作怎么办，几个月之后忘记了这事儿跑不起来了又怎么办，很麻烦。</p></li><li><p>不升级</p><p> 没准新版本解决了我的一个bug，我非升不可呢，多矛盾哈。</p></li></ol><p>那怎么办呢？</p><p>下面有请本次嘉宾 patch-package 出场 ：）</p><h1 id="使用-patch-package"><a href="#使用-patch-package" class="headerlink" title="使用 patch-package"></a>使用 patch-package</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>yarn add --dev patch-package</code> （不用说了）</p><p>然后在<code>package.json</code>加入如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;prepare&quot;: &quot;patch-package&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样<code>patch-package</code>就会在每次npm库新增、升级、删除等操作之后，自动加上你打的补丁。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>在<code>node_modules</code>目录下，对你想打补丁的三方库进行修改，比如将<code>node_modules/react-native-xxx/android/src/main/path/to/xxxPackage.java</code>中的<code>createJSModules</code>方法的<code>@Override</code>前缀删除。</li><li>运行<code>yarn patch-package react-native-xxx</code>，补丁会保存在<code>patches/react-native-xxx+a.b.c.patch</code>，每次<code>yarn install/add/remove/...</code>等操作后，<code>patch-package</code>会自动为你打上补丁，直到某一天<code>react-native-xxx</code>升级以后，补丁冲突了（很大可能就是fix了），那么它的使命也就完成了</li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>适合一些比较小的地方的修改，改个一两行之类的，碰上react-native不想merge的分支，可能用这个不太合适。。说不定更新没几个版本就冲突了，那还是老老实实fork吧。。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://github.com/facebook/react-native/pull/12807" target="_blank" rel="noopener">[Android] Add file input to WebView</a><br><a href="https://github.com/facebook/react-native/pull/6478" target="_blank" rel="noopener">[Android] Add onShouldStartLoadWithRequest callback to WebView</a><br><a href="https://facebook.github.io/react-native/releases/next/docs/custom-webview-android.html" target="_blank" rel="noopener">Custom WebView</a><br><a href="https://github.com/ds300/patch-package/issues/15" target="_blank" rel="noopener">ds300/pack-package#15</a><br><a href="http://blog.novanet.no/easier-react-native-upgrade-with-patch-package/" target="_blank" rel="noopener">Easier React Native upgrade with patch-package</a><br><a href="https://facebook.github.io/react-native/docs/android-building-from-source.html" target="_blank" rel="noopener">Building React Native from source</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;用英文写了好久，实在是写不下去全删了，太蹩脚了哈哈哈哈&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;大家都知道 React Native 更新频率很快，这么久了也没有出稳定版，经常会有一些API的变动导致三方库不兼容新版本，这都是很常见的。比如0.47去除了Android的&lt;code&gt;createJSModules&lt;/code&gt;方法，相对应的所有的三方库都得把这方法前面的&lt;code&gt;@Override&lt;/code&gt;给去掉，不然就会编译失败了。&lt;/p&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://blog.0x5e.cn/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="node, js, npm, react-native" scheme="https://blog.0x5e.cn/tags/node-js-npm-react-native/"/>
    
  </entry>
  
  <entry>
    <title>macOS 实现 DLNA 投屏</title>
    <link href="https://blog.0x5e.cn/2017/07/17/macos-dlna-cast/"/>
    <id>https://blog.0x5e.cn/2017/07/17/macos-dlna-cast/</id>
    <published>2017-07-17T23:43:21.000Z</published>
    <updated>2019-03-15T09:22:40.598Z</updated>
    
    <content type="html"><![CDATA[<p>月初做的demo，实现了简单的dlna投屏功能。是我有点天真了，最初的设想是实现类似airplay的屏幕镜像功能，把电脑屏幕作为一个视频源在电视机上播放，在了解了dlna协议、视频直播技术之后发现，好像不行。看来这东西不存在也是有原因的。。。</p><a id="more"></a><h2 id="DLNA"><a href="#DLNA" class="headerlink" title="DLNA"></a>DLNA</h2><p>DLNA投屏的过程主要通过UPnP协议来完成，过程与许多智能设备（蓝牙、）的通讯大抵相似，总共三步：</p><ol><li>设备的发现（与连接）</li><li>查询设备支持哪些服务</li><li>对特定服务发送指令，接收事件回调</li></ol><p>对应到DLNA的UPnP协议：</p><ol><li>SSDP发现设备</li><li>HTTP获取设备信息</li><li>SOAP控制设备</li></ol><p>具体在 <a href="https://eliyar.biz/iOS_DLNA_with_local_image_and_video/" target="_blank" rel="noopener">Eliyar’s Blog - iOS 实现基于 DLNA 的本机图片，视频投屏</a> 有详细的过程。</p><p>然而，DLNA标准只要求实现HTTP GET，因此设备到底支持哪些视频格式，是否支持RTSP、HLS，这是不知道的。很不幸，我家的电视貌似是不支持，屏幕镜像计划泡汤。</p><h2 id="视频直播"><a href="#视频直播" class="headerlink" title="视频直播"></a>视频直播</h2><p>// 回来写</p><p><a href="http://blog.ucloud.cn/?p=699" target="_blank" rel="noopener">关于直播，所有的技术细节都在这里了（二）</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://eliyar.biz/iOS_DLNA_with_local_image_and_video/" target="_blank" rel="noopener">iOS 实现基于 DLNA 的本机图片，视频投屏</a></p><p><a href="http://www.cnblogs.com/damiao/p/5233431.html" target="_blank" rel="noopener">OSX下面用ffmpeg抓取桌面以及摄像头推流进行直播</a></p><p><a href="https://github.com/cherezov/dlnap" target="_blank" rel="noopener">dlnap</a></p><p><a href="https://github.com/ClaudeLi/DLNA_UPnP" target="_blank" rel="noopener">DLNA_UPnP</a></p><p><a href="https://developer.apple.com/documentation/avfoundation/avcapturescreeninput" target="_blank" rel="noopener">AVCaptureScreenInput - AVFoundation | Apple Developer Documentation</a></p><p><a href="https://www.coder4.com/archives/5273" target="_blank" rel="noopener">iOS如何实现TCP、UDP抓包</a></p><p><a href="http://blog.ucloud.cn/?p=699" target="_blank" rel="noopener">关于直播，所有的技术细节都在这里了（二）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;月初做的demo，实现了简单的dlna投屏功能。是我有点天真了，最初的设想是实现类似airplay的屏幕镜像功能，把电脑屏幕作为一个视频源在电视机上播放，在了解了dlna协议、视频直播技术之后发现，好像不行。看来这东西不存在也是有原因的。。。&lt;/p&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://blog.0x5e.cn/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="macOS, swift, dlna" scheme="https://blog.0x5e.cn/tags/macOS-swift-dlna/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV 提取拼图轮廓</title>
    <link href="https://blog.0x5e.cn/2017/06/08/opencv-pintu-try/"/>
    <id>https://blog.0x5e.cn/2017/06/08/opencv-pintu-try/</id>
    <published>2017-06-08T21:21:38.000Z</published>
    <updated>2019-03-15T09:22:40.598Z</updated>
    
    <content type="html"><![CDATA[<p>六二节收到一份拼图礼物，1000片真狗·doge拼图，我有一句话不知当讲不当讲：</p><blockquote><p>～！@#¥%……&amp;*（）</p></blockquote><a id="more"></a><p><img src="IMG_5001.jpg" alt></p><p>我的内心仿佛有1000只doge正在微笑</p><p>但是，由于送礼的人比较特殊，这拼图不拼完好像不行：）</p><p><img src="IMG_5017.jpg" alt></p><p><img src="IMG_5018.jpg" alt></p><p>花了一天时间才完成了1/4。。。边拼边想，要是能用图像处理帮我完成就好了。虽然毫无经验，但是拿来入门，尝试一下也是好的，反正很闲嘛（手动滑稽）</p><h3 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h3><p>opencv提供了很多很多现成方法，但是怎么排列组合，参数调到多少比较合适，这些一时半会儿也学不会。大致按照滤波、增强、检测几个步骤，反复试参数得到了比较明显的轮廓：</p><p>原图：</p><p><img src="IMG_5008.jpg" alt></p><p>轮廓：</p><p><img src="IMG_5008.out.jpg" alt></p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding=utf8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'IMG_5008.jpg'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">###########################</span></span><br><span class="line"><span class="comment"># 1. 滤波</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 高斯滤波</span></span><br><span class="line">img = cv2.GaussianBlur(img,(<span class="number">3</span>,<span class="number">3</span>),<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中值滤波</span></span><br><span class="line"><span class="comment"># img = cv2.medianBlur(img, 5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###########################</span></span><br><span class="line"><span class="comment"># 2. 增强</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 灰度直方图均衡</span></span><br><span class="line"><span class="comment"># img = cv2.equalizeHist(img)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Laplace图像增强</span></span><br><span class="line"><span class="comment"># kernel = numpy.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]])</span></span><br><span class="line">kernel = numpy.ones((<span class="number">3</span>,<span class="number">3</span>),numpy.float32)/<span class="number">9</span></span><br><span class="line">img = cv2.filter2D(img, <span class="number">-1</span>, kernel)</span><br><span class="line"></span><br><span class="line"><span class="comment">###########################</span></span><br><span class="line"><span class="comment"># 3.检测</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Canny边缘检测</span></span><br><span class="line">canny = cv2.Canny(img, <span class="number">50</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sobe</span></span><br><span class="line"><span class="comment"># x = cv2.Sobel(img,cv2.CV_16S,1,0)</span></span><br><span class="line"><span class="comment"># y = cv2.Sobel(img,cv2.CV_16S,0,1)</span></span><br><span class="line"><span class="comment"># absX = cv2.convertScaleAbs(x)</span></span><br><span class="line"><span class="comment"># absY = cv2.convertScaleAbs(y)</span></span><br><span class="line"><span class="comment"># sobel = cv2.addWeighted(absX,0.5,absY,0.5,0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#提取轮廓</span></span><br><span class="line">_,contours, hierarchy = cv2.findContours(canny, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'轮廓集合：%d 个'</span>%len(contours)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标记</span></span><br><span class="line">cv2.drawContours(img,contours,<span class="number">-1</span>,(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 标记最大区域</span></span><br><span class="line"><span class="comment"># maxArea = 0</span></span><br><span class="line"><span class="comment"># maxAreaIndex = -1</span></span><br><span class="line"><span class="comment"># for i in range(0, len(contours)):</span></span><br><span class="line"><span class="comment"># contour = contours[i]</span></span><br><span class="line"><span class="comment"># area = cv2.contourArea(contour)</span></span><br><span class="line"><span class="comment"># if area &gt; maxArea:</span></span><br><span class="line"><span class="comment"># maxArea = area</span></span><br><span class="line"><span class="comment"># maxAreaIndex = i</span></span><br><span class="line"><span class="comment"># cv2.drawContours(img,contours,maxAreaIndex,(0,255,0),2)</span></span><br><span class="line"></span><br><span class="line">cv2.namedWindow(<span class="string">'img'</span>)</span><br><span class="line">cv2.imshow(<span class="string">'img'</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line">cv2.imwrite(<span class="string">'out.jpg'</span>, canny)</span><br></pre></td></tr></table></figure><p>反复调整canny等参数的阈值，我得到的要么是由多个片段组成的完整轮廓，要么是单个片段的残缺的轮廓，这样的数据暂时好像没什么用处。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://lizonghang.github.io/2016/07/16/Mac上安装python-opencv/" target="_blank" rel="noopener">Mac上安装python-opencv</a><br><a href="http://blog.csdn.net/MoreWindows/article/category/1291764" target="_blank" rel="noopener">MoreWindows Blog - OpenCV入门指南</a><br><a href="http://baoxizhao.com/2017/03/18/python%20openCV图像处理之提取轮廓/" target="_blank" rel="noopener">python openCV图像处理之提取轮廓</a><br><a href="https://loopvoid.github.io/2017/02/19/Opencv图像增强算法实法/" target="_blank" rel="noopener">Opencv图像增强算法实现(直方图均衡化、Laplace、Log、Gamma)</a><br><a href="http://www.voidcn.com/blog/wishchin/article/p-5716536.html" target="_blank" rel="noopener">OpenCV边缘检测的详细参数调节</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;六二节收到一份拼图礼物，1000片真狗·doge拼图，我有一句话不知当讲不当讲：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;～！@#¥%……&amp;amp;*（）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://blog.0x5e.cn/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="opencv, python" scheme="https://blog.0x5e.cn/tags/opencv-python/"/>
    
  </entry>
  
  <entry>
    <title>使用 Webpack Loader 处理 Markdown 文件</title>
    <link href="https://blog.0x5e.cn/2017/05/15/webpack-loader-process-markdown-files/"/>
    <id>https://blog.0x5e.cn/2017/05/15/webpack-loader-process-markdown-files/</id>
    <published>2017-05-15T18:01:41.000Z</published>
    <updated>2019-03-15T09:22:40.642Z</updated>
    
    <content type="html"><![CDATA[<p>Webpack Loader 可以在预编译期间对模块、资源文件进行转换，常见的使用场景：</p><ul><li>CoffeeScript、TypeScript、Vue、ES6 转换为 CommonJS</li><li>在转换的过程中进行语法检查并提示（或者只检查，不作转换）</li><li>CSS 转换为 JS 代码</li><li>图片转换为 Data URI(<code>data:image/png;base64,...</code>) 直接引用</li></ul><p>经过各种loader的预处理，我们能够用<code>require(&#39;xxx-loader!./path/to/file&#39;)</code>的形式，将任意类型的文件引入到代码当中。</p><h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><p>作为一个新手，在似懂非懂的情况下，做了各种尝试（反正我比较闲。。），最终还是觉得 Webpack Loader 符合我的需求。</p><p>目标：</p><ul><li>在 Vue 项目中解析 Markdown 文件</li><li>处理 Markdown 的 Front Matter 头（yaml格式）</li><li>正确处理 Markdown 中的相对路径</li></ul><a id="more"></a><h3 id="Round-1-vue-resource-front-matter-vue-markdown"><a href="#Round-1-vue-resource-front-matter-vue-markdown" class="headerlink" title="Round 1: vue-resource + front-matter + vue-markdown"></a>Round 1: vue-resource + front-matter + vue-markdown</h3><ol><li>把<code>.md</code>放在<code>/static/</code>目录下，通过<code>vue-resource</code>的 ajax 请求获取文件内容</li><li>用<code>front-matter</code>分别得到头信息（标题、时间、分类、Tag）和正文内容</li><li>自行展示头信息的内容</li><li>将正文内容交给<code>vue-markdown</code>组件进行渲染</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="keyword">let</span> url = <span class="string">'/static/posts/demo.md'</span></span><br><span class="line"><span class="keyword">this</span>.$http.get(url).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response.bodyText)</span><br><span class="line">&#125;, response =&gt; &#123;</span><br><span class="line">  <span class="keyword">throw</span> response</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="keyword">import</span> fm <span class="keyword">from</span> <span class="string">'front-matter'</span></span><br><span class="line"><span class="keyword">let</span> content = fm(text)</span><br><span class="line"><span class="built_in">console</span>.log(content.attributes) <span class="comment">// &#123;"title": "xxx", "date": "xxx", "tags": "xxx", ...&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(content.body) <span class="comment">// content text ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.</span></span><br><span class="line">&lt;vue-markdown v-bind:source=<span class="string">"content.body"</span> /&gt;</span><br></pre></td></tr></table></figure><h3 id="Round-2-url-loader-vue-resource-front-matter-vue-markdown"><a href="#Round-2-url-loader-vue-resource-front-matter-vue-markdown" class="headerlink" title="Round 2: url-loader + vue-resource + front-matter + vue-markdown"></a>Round 2: url-loader + vue-resource + front-matter + vue-markdown</h3><ol><li><p><code>.md</code>文件被webpack打包js中，用<code>require</code>获取<code>Data URI</code>地址，然后仍使用<code>vue-resource</code>获取文件内容</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="built_in">require</span>(<span class="string">'../posts/demo.md'</span>)</span><br><span class="line"><span class="keyword">this</span>.$http.get(url).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure></li><li><p>其余部分与之前相同</p></li></ol><p>与前者的区别是，<code>.md</code>文件交由webpack管理，webpack可以根据文件的大小来决定，到底是打包到js中（节约一次http请求），还是单独保存。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.base.conf.js</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.md$/</span>,</span><br><span class="line">        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: <span class="number">8192</span>, <span class="comment">// 体积小于8k的文件会被打包</span></span><br><span class="line">          name: utils.assetsPath(<span class="string">'posts/[name].[hash:7].[ext]'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里碰到一个小问题：<br>用<code>url-loader</code>获得的<code>Data URI</code>没有设置默认编码，产生乱码。<br>最后通过字符串替换的方法插入了默认编码<code>charset=utf-8;</code>，解决。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定默认编码utf-8</span></span><br><span class="line"><span class="comment">// "data:image/png;base64,..." =&gt; "data:image/png;charset=utf-8;base64,..."</span></span><br><span class="line"><span class="keyword">var</span> url = url.replace(<span class="regexp">/;/</span>, <span class="string">';charset=utf-8;'</span>)</span><br></pre></td></tr></table></figure><h3 id="Round-3-raw-loader-front-matter-vue-markdown"><a href="#Round-3-raw-loader-front-matter-vue-markdown" class="headerlink" title="Round 3: raw-loader + front-matter + vue-markdown"></a>Round 3: raw-loader + front-matter + vue-markdown</h3><ol><li><p>直接用<code>require</code>获取<code>.md</code>文件内容，不需ajax请求</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="built_in">require</span>(<span class="string">'../posts/demo.md'</span>)</span><br></pre></td></tr></table></figure></li><li><p>其余部分与之前相同</p></li></ol><p>省去了一个体积略大，并且有点大材小用的<code>vue-resource</code>库。（后来才发现<code>front-matter</code>、<code>vue-markdown</code>大多了。。）</p><h3 id="Final-Round-4-json-loader-front-matter-loader-vue-markdown-loader"><a href="#Final-Round-4-json-loader-front-matter-loader-vue-markdown-loader" class="headerlink" title="Final Round 4: json-loader + front-matter-loader + vue-markdown-loader"></a>Final Round 4: json-loader + front-matter-loader + vue-markdown-loader</h3><p>不小心发现，编译出来的文件已经挺大了，<code>vendow.*.js</code>竟然达到了900kb。于是赶紧搜索”webpack体积优化”，找到一串分析各个模块大小的指令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yarn global add webpack</span></span><br><span class="line">$ webpack --display-modules --sort-modules-by size --config <span class="string">"build/webpack.prod.conf.js"</span></span><br></pre></td></tr></table></figure><p>发现<code>front-matter</code> =&gt; <code>js-yaml</code> =&gt; <code>esprima</code>占了100多kb，其他还有很多50-100kb的库没有仔细看。</p><p>再次查阅了一下 Webpack Loader 的资料，发现 loader 有一个很有用的特性：支持链式调用。</p><blockquote><p>Loader 可以通过管道方式链式调用，每个 loader 可以把资源转换成任意格式并传递给下一个 loader ，但是最后一个 loader 必须返回 JavaScript。</p></blockquote><p>并且<code>front-matter-loader</code>的<code>README.md</code>中有很好的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链式调用</span></span><br><span class="line"><span class="keyword">var</span> exampleFrontmatter = <span class="built_in">require</span>(<span class="string">'json-loader!front-matter-loader!./example.md'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式调用+传参</span></span><br><span class="line"><span class="keyword">var</span> exampleAttributes = <span class="built_in">require</span>(<span class="string">'json-loader!front-matter-loader?onlyAttributes!./example.md'</span>)</span><br><span class="line"><span class="keyword">var</span> exampleContent = <span class="built_in">require</span>(<span class="string">'raw-loader!front-matter-loader?onlyBody!./example.md'</span>)</span><br></pre></td></tr></table></figure><p>就像函数调用那样，<code>front-matter-loader!</code>将<code>./example.md</code>转换成了json格式的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标题</span><br><span class="line">date: 2017-05-15 00:00:00</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">正文内容</span><br></pre></td></tr></table></figure><p>转换为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  attributes: &#123;</span><br><span class="line">    title: "标题",</span><br><span class="line">    date: "2017-05-15 00:00:00",</span><br><span class="line">  &#125;,</span><br><span class="line">  body: "正文内容"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着<code>json-loader!</code>又将这个json格式的文件，转换成模块（js对象）。于是我就可以按我想要的方式展示内容了。Nice Job！</p><h4 id="Final-Code"><a href="#Final-Code" class="headerlink" title="Final Code"></a>Final Code</h4><p>核心部分就三句：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// front-matter yaml =&gt; json</span></span><br><span class="line"><span class="keyword">let</span> frontmatter = <span class="built_in">require</span>(<span class="string">'json-loader!front-matter-loader?onlyAttributes!../posts/demo.md'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// content-body =&gt; vue component</span></span><br><span class="line"><span class="keyword">let</span> component = <span class="built_in">require</span>(<span class="string">'vue-markdown-loader!front-matter-loader?onlyBody!../posts/demo.md'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue dynamic component load</span></span><br><span class="line">&lt;div :is=<span class="string">"component"</span>/&gt;</span><br></pre></td></tr></table></figure><p><code>front-matter-loader?onlyattributes!</code>后面那段类似于url query，作为参数。每段loader之间用<code>!</code>分隔</p><p>（如果<code>vue-markdown-loader</code>能直接解析front-matter那就更方便了，改天提个PR）</p><p>最最最后：一个门外汉的折腾经历，前端大牛们见笑了:-)</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://zhaoda.net/webpack-handbook/loader.html" target="_blank" rel="noopener">Loader | Webpack 中文指南</a></p><p><a href="https://webpack.toobug.net/zh-cn/chapter4/using-loaders.html" target="_blank" rel="noopener">使用Loader · webpack指南</a></p><p><a href="http://madscript.com/html5/datauri-best-practice/" target="_blank" rel="noopener">Data URI 最佳实践</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Webpack Loader 可以在预编译期间对模块、资源文件进行转换，常见的使用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CoffeeScript、TypeScript、Vue、ES6 转换为 CommonJS&lt;/li&gt;
&lt;li&gt;在转换的过程中进行语法检查并提示（或者只检查，不作转换）&lt;/li&gt;
&lt;li&gt;CSS 转换为 JS 代码&lt;/li&gt;
&lt;li&gt;图片转换为 Data URI(&lt;code&gt;data:image/png;base64,...&lt;/code&gt;) 直接引用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经过各种loader的预处理，我们能够用&lt;code&gt;require(&amp;#39;xxx-loader!./path/to/file&amp;#39;)&lt;/code&gt;的形式，将任意类型的文件引入到代码当中。&lt;/p&gt;
&lt;h2 id=&quot;尝试&quot;&gt;&lt;a href=&quot;#尝试&quot; class=&quot;headerlink&quot; title=&quot;尝试&quot;&gt;&lt;/a&gt;尝试&lt;/h2&gt;&lt;p&gt;作为一个新手，在似懂非懂的情况下，做了各种尝试（反正我比较闲。。），最终还是觉得 Webpack Loader 符合我的需求。&lt;/p&gt;
&lt;p&gt;目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 Vue 项目中解析 Markdown 文件&lt;/li&gt;
&lt;li&gt;处理 Markdown 的 Front Matter 头（yaml格式）&lt;/li&gt;
&lt;li&gt;正确处理 Markdown 中的相对路径&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://blog.0x5e.cn/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="vue, webpack, markdown" scheme="https://blog.0x5e.cn/tags/vue-webpack-markdown/"/>
    
  </entry>
  
  <entry>
    <title>Being a salty fish</title>
    <link href="https://blog.0x5e.cn/2017/05/11/being-a-salty-fish/"/>
    <id>https://blog.0x5e.cn/2017/05/11/being-a-salty-fish/</id>
    <published>2017-05-11T00:54:00.000Z</published>
    <updated>2019-03-15T09:22:40.598Z</updated>
    
    <content type="html"><![CDATA[<p>A salty fish is now studying vue.js, so he wanna do sth to practice.<br>And because he is very very salty, he decide to write article in English(Chinglish).</p><p>One day, he is wondering, why not use vue.js to build a blog system?<br>Although there are lots of wheels implenenting the blog system, he still want to write one by himself. Why? Because very salty, of course.</p><a id="more"></a><p><img src="alcohol-salty-fish.png" alt></p><h2 id="Analyze"><a href="#Analyze" class="headerlink" title="Analyze"></a>Analyze</h2><p>Make an analyze first. Which feature should be kept and which feature I’d like to modify, a fully comparison between each blog systems is required.</p><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p><a href="https://hexo.io" target="_blank" rel="noopener">https://hexo.io</a></p><ul><li>backend-free</li><li>markdown writing</li><li>plugin</li><li>theme</li><li>i18n</li></ul><h3 id="Vue-blog"><a href="#Vue-blog" class="headerlink" title="Vue blog"></a>Vue blog</h3><p>Here are some vue blog systems above 100 stars. Mostly needs backend.</p><p><a href="https://github.com/jcc/blog" target="_blank" rel="noopener">https://github.com/jcc/blog</a></p><p><a href="https://github.com/Vuedo/vuedo" target="_blank" rel="noopener">https://github.com/Vuedo/vuedo</a></p><p><a href="https://github.com/viko16/vue-ghpages-blog" target="_blank" rel="noopener">https://github.com/viko16/vue-ghpages-blog</a> <em>backend-free</em></p><p><a href="https://github.com/elva2596/vueBlog" target="_blank" rel="noopener">https://github.com/elva2596/vueBlog</a></p><p><a href="https://github.com/lincenying/mmf-blog-vue2" target="_blank" rel="noopener">https://github.com/lincenying/mmf-blog-vue2</a></p><p><a href="https://github.com/BUPT-HJM/vue-blog" target="_blank" rel="noopener">https://github.com/BUPT-HJM/vue-blog</a></p><p><a href="https://github.com/jiangjiu/vue-leancloud-blog" target="_blank" rel="noopener">https://github.com/jiangjiu/vue-leancloud-blog</a></p><p><a href="https://github.com/myst729/Vuelog" target="_blank" rel="noopener">https://github.com/myst729/Vuelog</a> <em>backend-free</em></p><h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><p>List By Module：</p><ul><li>Render<ul><li>Markdown<ul><li>Front Matter</li><li>Style</li></ul></li><li>AsciiDoc maybe</li></ul></li><li>Generate<ul><li>Home Page</li><li>Archives</li><li>Tags</li><li>RSS Feed</li></ul></li><li>Config<ul><li>Site info</li><li>Route rules</li><li>Date/Time format</li><li>i18n</li><li>Pagination</li><li>Others</li></ul></li><li>Deploy<ul><li>Git</li><li>Others</li></ul></li><li>Themes</li><li>Plugins</li></ul><h2 id="Choices"><a href="#Choices" class="headerlink" title="Choices"></a>Choices</h2><ul><li><p>markdown render</p><ul><li>webpack loader<ul><li><a href="https://webpack.github.io/docs/list-of-loaders.html" target="_blank" rel="noopener">https://webpack.github.io/docs/list-of-loaders.html</a></li><li><a href="http://webpack.github.io/docs/using-loaders.html" target="_blank" rel="noopener">http://webpack.github.io/docs/using-loaders.html</a></li><li><a href="https://github.com/peerigon/markdown-loader" target="_blank" rel="noopener">https://github.com/peerigon/markdown-loader</a></li><li><a href="https://github.com/QingWei-Li/vue-markdown-loader" target="_blank" rel="noopener">https://github.com/QingWei-Li/vue-markdown-loader</a></li></ul></li><li>vue component<ul><li><a href="https://github.com/miaolz123/vue-markdown" target="_blank" rel="noopener">https://github.com/miaolz123/vue-markdown</a></li></ul></li></ul></li><li><p>vue-router mode</p><ul><li>hash (markdown anchor not support)</li><li>history (backend required)</li></ul></li><li><p>vue-router rule</p><ul><li>path <code>./posts/{name}</code></li><li>query <code>./posts?name={name}</code></li></ul></li></ul><h2 id="to-learn"><a href="#to-learn" class="headerlink" title="to learn"></a>to learn</h2><ul><li>webpack usage</li><li>hexo plugin mechanism</li><li>advantage &amp; disadvantage of spa</li><li>seo</li><li>rss feed</li><li>ssr</li></ul><h2 id="Todos"><a href="#Todos" class="headerlink" title="Todos"></a>Todos</h2><ul><li><del>.md encoding problem</del> <code>charset=utf-8;</code></li><li>img links in .md</li><li>anchor in .md</li><li>first load progres animation</li><li>separate to cli, theme &amp;&amp; site project</li><li>plugin implementation mechanism<ul><li><a href="http://kyfxbl.iteye.com/blog/2237538" target="_blank" rel="noopener">http://kyfxbl.iteye.com/blog/2237538</a></li><li><a href="http://nodeonly.com/2015/07/07/npm-postinstall/" target="_blank" rel="noopener">http://nodeonly.com/2015/07/07/npm-postinstall/</a></li><li><a href="http://www.ieclipse.cn/en/2016/07/18/Web/Hexo-dev-plugin/" target="_blank" rel="noopener">http://www.ieclipse.cn/en/2016/07/18/Web/Hexo-dev-plugin/</a></li></ul></li><li>i18n</li><li>document</li><li>test</li></ul><p>many many many todo…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A salty fish is now studying vue.js, so he wanna do sth to practice.&lt;br&gt;And because he is very very salty, he decide to write article in English(Chinglish).&lt;/p&gt;
&lt;p&gt;One day, he is wondering, why not use vue.js to build a blog system?&lt;br&gt;Although there are lots of wheels implenenting the blog system, he still want to write one by himself. Why? Because very salty, of course.&lt;/p&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://blog.0x5e.cn/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="vue" scheme="https://blog.0x5e.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Hexo同时部署到Github和Coding并分流</title>
    <link href="https://blog.0x5e.cn/2017/05/10/hexo-github-coding-sync/"/>
    <id>https://blog.0x5e.cn/2017/05/10/hexo-github-coding-sync/</id>
    <published>2017-05-10T18:00:12.000Z</published>
    <updated>2019-03-15T09:22:40.598Z</updated>
    
    <content type="html"><![CDATA[<p>最近比较闲，可以整理一下博客。。</p><p>做分流是因为，平时还是Github用的多，不想把博客的项目单独存放在Coding上，但是呢又想让国内访问快一点（是不是很矫情）</p><p>本文主要内容有：</p><ul><li>travis自动部署<ul><li>生成ssh key</li><li>设置deploy key</li></ul></li><li>绑定自定义域名</li><li>域名海内外分流</li></ul><a id="more"></a><h2 id="用户-Pages-amp-项目-Pages"><a href="#用户-Pages-amp-项目-Pages" class="headerlink" title="用户 Pages &amp; 项目 Pages"></a>用户 Pages &amp; 项目 Pages</h2><p>每个用户只能创建一个用户Pages，每个项目只能创建一个项目Pages。<br>用户Pages只能从<code>master</code>分支部署，这个坑了我好久，没看仔细。。</p><p><a href>https://coding.net/help/doc/pages/index.html#pages–pages</a></p><table><thead><tr><th style="text-align:left">Pages类型</th><th style="text-align:left">Pages默认URL</th><th style="text-align:left">允许的部署来源</th></tr></thead><tbody><tr><td style="text-align:left">Github 用户 Pages</td><td style="text-align:left"><code>{user_name}.github.io</code></td><td style="text-align:left"><code>master</code> 分支</td></tr><tr><td style="text-align:left">Github 项目 Pages</td><td style="text-align:left"><code>{user_name}.github.io/{project_name}</code></td><td style="text-align:left"><code>master</code>分支、<code>gh-pages</code>分支、或<code>master</code>分支中的<code>/docs</code>目录</td></tr><tr><td style="text-align:left">Coding 用户 Pages</td><td style="text-align:left"><code>{user_name}.coding.me</code></td><td style="text-align:left"><code>master</code> 分支</td></tr><tr><td style="text-align:left">Coding 项目 Pages</td><td style="text-align:left"><code>{user_name}.coding.me/{project_name}</code></td><td style="text-align:left"><code>master</code>分支、<code>coding-pages</code>分支、或<code>master</code>分支中的<code>/docs</code>目录</td></tr></tbody></table><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>因为上面的原因，我把博客源文件存放在<code>0x5e.github.io</code>的<code>blog</code>分支，编译的网页文件提交到<code>0x5e.github.io</code>和<code>0x5e.coding.me</code>的<code>master</code>分支。（建仓库就不说了）</p><h3 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h3><p>安装插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add hexo-deployer-git</span><br></pre></td></tr></table></figure><p>在<code>_config.yml</code>文件添加配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment"># Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:0x5e/0x5e.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@git.coding.net:0x5e/0x5e.coding.me.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>新建一篇文章，然后执行<code>hexo deploy</code>，完成。</p><h3 id="Travis自动部署"><a href="#Travis自动部署" class="headerlink" title="Travis自动部署"></a>Travis自动部署</h3><h4 id="创建ssh-key"><a href="#创建ssh-key" class="headerlink" title="创建ssh key"></a>创建ssh key</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;Travis CI&quot;</span><br></pre></td></tr></table></figure><h4 id="设置为项目deploy-key"><a href="#设置为项目deploy-key" class="headerlink" title="设置为项目deploy key"></a>设置为项目deploy key</h4><p>把刚才创建的ssh公钥加入项目中，注意：需要开启写入权限</p><p>Github: <code>Settings</code> =&gt; <code>Deploy keys</code> =&gt; <code>Add deploy key</code><br>Coding: <code>设置</code> =&gt; <code>部署公钥</code> =&gt; <code>新建部署公钥</code></p><h4 id="加密ssh私钥"><a href="#加密ssh私钥" class="headerlink" title="加密ssh私钥"></a>加密ssh私钥</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Install travis</span><br><span class="line">sudo gem install -n -n /usr/local/bin travis</span><br><span class="line"></span><br><span class="line"># Login</span><br><span class="line">travis login --auto</span><br><span class="line"></span><br><span class="line"># Encrypt</span><br><span class="line">travis enctypt-file /path/to/id_rsa --add</span><br></pre></td></tr></table></figure><p>把生成的<code>id_rsa.enc</code>保存到<code>.travis/id_rsa.enc</code>，待会用到</p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>修改<code>.travis.yml</code>配置文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"7"</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">  yarn:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  directories:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">node_modules</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">openssl</span> <span class="string">aes-256-cbc</span> <span class="bullet">-K</span> <span class="string">$encrypted_44ad502b10c9_key</span> <span class="bullet">-iv</span> <span class="string">$encrypted_44ad502b10c9_iv</span> <span class="bullet">-in</span> <span class="string">.travis/id_rsa.enc</span> <span class="bullet">-out</span> <span class="string">~/.ssh/id_rsa</span> <span class="bullet">-d</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">eval</span> <span class="string">$(ssh-agent)</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">ssh-add</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">cp</span> <span class="string">.travis/ssh_config</span> <span class="string">~/.ssh/config</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.name</span> <span class="string">'0x5e'</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.email</span> <span class="string">'0x5e@sina.cn'</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">yarn</span> <span class="string">global</span> <span class="string">add</span> <span class="string">hexo-cli</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">yarn</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">yarn</span> <span class="string">run</span> <span class="string">deploy</span>  <span class="comment"># hexo clean &amp;&amp; hexo g -d</span></span><br><span class="line"><span class="attr">addons:</span></span><br><span class="line"><span class="attr">  ssh_known_hosts:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">github.com</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git.coding.net</span></span><br></pre></td></tr></table></figure><p><code>encrypted_xxx_key</code>，<code>encrypted_xxx_iv</code>改为对应的值，还有name &amp; email。</p><p><code>ssh_known_hosts</code>也需要添加，不然第一次链接ssh的时候会提示输入<code>yes/no</code>，导致无法自动构建而失败。</p><h2 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h2><p>Github: 新增一条<code>CNAME</code>记录到<code>{user_name}.github.io</code>。<br>Coding: 新增一条<code>CNAME</code>记录到<code>pages.coding.me</code>，然后在项目设置里添加自定义域名。</p><h3 id="海内外分流"><a href="#海内外分流" class="headerlink" title="海内外分流"></a>海内外分流</h3><p>其实就是添加两条相同的主机记录，分别到Github和Coding，只是解析线路一条设置为海外，一条设置为国内（默认），如图：</p><p><img src="dns-resolve.png" alt></p><p>就这样。。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://munen.cc/tech/coding-pages.html" target="_blank" rel="noopener">在 GITHUB 和 CODING 上同步托管 HEXO 博客</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近比较闲，可以整理一下博客。。&lt;/p&gt;
&lt;p&gt;做分流是因为，平时还是Github用的多，不想把博客的项目单独存放在Coding上，但是呢又想让国内访问快一点（是不是很矫情）&lt;/p&gt;
&lt;p&gt;本文主要内容有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;travis自动部署&lt;ul&gt;
&lt;li&gt;生成ssh key&lt;/li&gt;
&lt;li&gt;设置deploy key&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;绑定自定义域名&lt;/li&gt;
&lt;li&gt;域名海内外分流&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="blog" scheme="https://blog.0x5e.cn/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>PTP/IP备忘录</title>
    <link href="https://blog.0x5e.cn/2017/03/29/ptp-ip-note/"/>
    <id>https://blog.0x5e.cn/2017/03/29/ptp-ip-note/</id>
    <published>2017-03-29T11:41:01.000Z</published>
    <updated>2019-03-15T09:22:40.642Z</updated>
    
    <content type="html"><![CDATA[<p>PTP/IP (Picture Transfer Protocol over Internet Protocol)</p><p>先MARK一下</p><a id="more"></a><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="http://www.imaging.org/site/IST/Standards/PTP_Standards/IST/Standards/PTP_Standards.aspx?hkey=53562f0a-d9af-44f2-aa8b-f92ab989cf64" target="_blank" rel="noopener">Picture Transfer Protocol (PTP)- imaging</a></p><p><a href="http://www.cipa.jp/ptp-ip/index_e.html" target="_blank" rel="noopener">PTP-IP CIPA</a></p><p><a href="https://en.wikipedia.org/wiki/Picture_Transfer_Protocol" target="_blank" rel="noopener">Picture Transfer Protocol - Wikipedia</a></p><p><a href="https://github.com/mmattes/ptpip/blob/master/ptpip/ptpip.py" target="_blank" rel="noopener">ptpip.py</a></p><p><a href="http://gphoto.org/doc/ptpip.php" target="_blank" rel="noopener">PTP/IP - gphoto</a></p><p><a href="http://ptp.sourceforge.net/" target="_blank" rel="noopener">Free Software with PTP Support - sourceforge</a></p><h2 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h2><p><a href="http://www.cipa.jp/ptp-ip/documents_e/CIPA_DC-005_Whitepaper_ENG.pdf" target="_blank" rel="noopener">“Picture Transfer Protocol” over TCP/IP networks - CIPA</a></p><p><a href="https://people.ece.cornell.edu/land/courses/ece4760/FinalProjects/f2012/jmv87/site/files/pima15740-2000.pdf" target="_blank" rel="noopener">PIMA 15740-2000</a></p><p><a href="http://ieeexplore.ieee.org/ielx5/30/30482/01405726.pdf?tp=&amp;arnumber=1405726&amp;isnumber=30482" target="_blank" rel="noopener">PTP/IP -<br>A New Transport Specification for Wireless Photography</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PTP/IP (Picture Transfer Protocol over Internet Protocol)&lt;/p&gt;
&lt;p&gt;先MARK一下&lt;/p&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://blog.0x5e.cn/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>震惊！Xcode原来还有这种功能！</title>
    <link href="https://blog.0x5e.cn/2017/03/26/quick-look-debugging/"/>
    <id>https://blog.0x5e.cn/2017/03/26/quick-look-debugging/</id>
    <published>2017-03-26T11:54:41.000Z</published>
    <updated>2019-03-15T09:22:40.642Z</updated>
    
    <content type="html"><![CDATA[<p><img src="zhenjing.jpg" alt></p><p>这么多年才发现这个功能。。感觉一大把时光被浪费了- -ll</p><h2 id="Quick-Look-Debugging"><a href="#Quick-Look-Debugging" class="headerlink" title="Quick Look Debugging"></a>Quick Look Debugging</h2><p>macOS的Quick Look是我很喜欢的功能之一，其实Xcode调试器也有这样的能力，可以快速查看一些实例对象的可视化内容，节省很多调试UI的时间。</p><p><img src="http://nshipster.s3.amazonaws.com/quicklook-color.gif" alt></p><a id="more"></a><h3 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h3><blockquote></blockquote><ul><li>图片： UIImage，NSImage，UIImageView，NSImageView，CIImage，和 NSBitmapImageRep 都可以快速查看。</li><li>颜色： UIColor 和 NSColor。 （抱歉，CGColor。）</li><li>字符串： NSString 和 NSAttributedString。</li><li>几何： UIBezierPath 和 NSBezierPath，以及 CGPoint，CGRect，和 CGSize。</li><li>地区： CLLocation 将显示一个很大的，互动的映射位置，并显示高度和精度的细节。</li><li>URLs： NSURL 将显示 URL 所指的本地或远程的内容。</li><li>光标： NSCursor，为我们中间的光标指示。</li><li>SpriteKit： SKSpriteNode，SKShapeNode，SKTexture，和 SKTextureAtlas 都会被显示。</li><li>数据： NSData 将漂亮的显示出偏移的十六进制和 ASCII 值。</li><li>视图： 最后但并非最不重要的，任何 UIView 子类都将在快速查看弹出框中显示其内容，方便极了。</li></ul><h3 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h3><p>实现<code>debugQuickLookObject</code>方法，返回任意一个内置类型即可，例如：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> Foundation;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSDictionary</span> (<span class="title">QuickLook</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)debugQuickLookObject &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.description;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>方便调试咯。。。</p><ul><li>可以用在NSDictionary、NSArray、NSSet上，方便调试时复制内容</li><li>Mantle等其它JSON转Model库</li><li>lottie直接查看动图（不知道好不好实现）</li></ul><p>不知道是不是我火星了，应该有挺多人不知道的吧。有空再想想再试试，为提高生产力做点贡献。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://nshipster.cn/quick-look-debugging/" target="_blank" rel="noopener">http://nshipster.cn/quick-look-debugging/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;zhenjing.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;这么多年才发现这个功能。。感觉一大把时光被浪费了- -ll&lt;/p&gt;
&lt;h2 id=&quot;Quick-Look-Debugging&quot;&gt;&lt;a href=&quot;#Quick-Look-Debugging&quot; class=&quot;headerlink&quot; title=&quot;Quick Look Debugging&quot;&gt;&lt;/a&gt;Quick Look Debugging&lt;/h2&gt;&lt;p&gt;macOS的Quick Look是我很喜欢的功能之一，其实Xcode调试器也有这样的能力，可以快速查看一些实例对象的可视化内容，节省很多调试UI的时间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://nshipster.s3.amazonaws.com/quicklook-color.gif&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://blog.0x5e.cn/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="iOS" scheme="https://blog.0x5e.cn/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS动态库的按需加载</title>
    <link href="https://blog.0x5e.cn/2017/03/20/ios-link-dynamic-framework/"/>
    <id>https://blog.0x5e.cn/2017/03/20/ios-link-dynamic-framework/</id>
    <published>2017-03-20T20:44:43.000Z</published>
    <updated>2019-03-15T09:22:40.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因是这样的"><a href="#起因是这样的" class="headerlink" title="起因是这样的"></a>起因是这样的</h2><p>App引入了两个摄像头厂商的SDK，由于他们都用到了ffmpeg，大致是注册解码器的时候产生了冲突，导致A.framework无法使用，Crash了。。。</p><p>A.framework的工程师看完错误日志以后认为，是B.framework没有编译进xxx音频解码器，并且注册时机过早，导致A库注册失败，产生闪退。他给的解决方案是：<br>1、给他一些时间修改ffmpeg源码，调整注册解码器的时机。<br>2、让B库编译ffmpeg的时候加入xxx音频解码器。</p><p>第一个方案听起来就很不放心，并且我也不太明白为什么注册非要改源码才可以？？<br>考虑到传统厂商的反应速度与沟通成本，在方案二的实施过程中，尝试了一下动态库的按需加载。</p><a id="more"></a><h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><p>今年我们放弃了iOS7的支持，才有机会尝试动态库的集成。</p><p>首先我新建了一个子项目，对B静态库重新做了一层封装，并且引入所需的系统库、三方静态库依赖，把他重新包装成一个动态库。<br>这样会清晰很多，接近二十多个依赖，直接链接到App工程里的话，都搞不清楚是什么地方用到了，合并分支也很不方便。</p><h3 id="使用静态库"><a href="#使用静态库" class="headerlink" title="使用静态库"></a>使用静态库</h3><p>将framework链接到项目中：<br><code>Targets--&gt;Build Phases--&gt;Link Binary With Libraries</code></p><h3 id="使用动态库"><a href="#使用动态库" class="headerlink" title="使用动态库"></a>使用动态库</h3><p>将framework链接到项目中：<br><code>Targets--&gt;Build Phases--&gt;Link Binary With Libraries</code></p><p>并且作为资源文件拷贝到Bundle：<br><code>Targets--&gt;Build Phases--&gt;Copy Bundle Resources</code></p><h3 id="动态库按需加载"><a href="#动态库按需加载" class="headerlink" title="动态库按需加载"></a>动态库按需加载</h3><p>上一种方法是在应用启动时自动加载动态库的，如果要做按需加载、释放，需要把动态库从<code>Link Binary With Libraries</code>列表中移除，在需要的时候自行加载。主要用到了这两个方法：</p><p><code>-[NSBundle loadAndReturnError:]</code><br><code>-[NSBundle unload]</code></p><p>示例代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载动态库</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)loadFramework:(<span class="built_in">NSString</span> *)frameworkName &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *path = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@/%@"</span>, [<span class="built_in">NSBundle</span> mainBundle].privateFrameworksPath, frameworkName];</span><br><span class="line">    <span class="built_in">NSBundle</span> *bundle = [<span class="built_in">NSBundle</span> bundleWithPath:path];</span><br><span class="line">    <span class="keyword">if</span> (!bundle) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@ not found"</span>, frameworkName);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSError</span> *error;</span><br><span class="line">    <span class="keyword">if</span> (![bundle loadAndReturnError:&amp;error]) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Load %@ failed: %@"</span>, frameworkName, error);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Load %@ success"</span>, frameworkName);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用B.framework库中的Person类</span></span><br><span class="line">- (<span class="keyword">void</span>)test &#123;</span><br><span class="line">    [<span class="keyword">self</span> loadFramework:<span class="string">@"B.framework"</span>];</span><br><span class="line">    Class Person = <span class="built_in">NSClassFromString</span>(<span class="string">@"Person"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!Person) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Person *person = [[Person alloc] init];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [person doSomeThing]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dlopen()</code>也可以加载动态库，但是应该是过不了应用审核的，所以没有尝试。</p><p>需要注意的地方是，因为编译期没有链接动态库，只是把动态库作为资源文件放入应用Bundle目录中，所以<code>Person</code>类在主程序中是不存在的，直接<code>[[Person alloc] init]</code>会报编译错误：<code>Undefined symbols for architecture xxx</code>。需要先加载动态库对应的Bundle，然后在运行时通过<code>NSClassFromString</code>获取对应的类，再进行初始化。</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>成功解决了两个库的冲突问题，并且动态库的按需加载，使得我有能力对最终的ipa文件做裁剪。同一个ipa安装包，提供给C客户的需要使用A、B两类摄像头，而D客户并不需要摄像头功能，那我就可以把ipa里的动态库删掉，然后重签名，不光节省几十m的体积，也节约了频繁编译花费的大量时间。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.gitbook.com/book/leon_lizi/-framework-/details" target="_blank" rel="noopener">https://www.gitbook.com/book/leon_lizi/-framework-/details</a></li><li><a href="https://skyline75489.github.io/post/2015-8-14_ios_static_dynamic_framework_learning.html" target="_blank" rel="noopener">https://skyline75489.github.io/post/2015-8-14_ios_static_dynamic_framework_learning.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;起因是这样的&quot;&gt;&lt;a href=&quot;#起因是这样的&quot; class=&quot;headerlink&quot; title=&quot;起因是这样的&quot;&gt;&lt;/a&gt;起因是这样的&lt;/h2&gt;&lt;p&gt;App引入了两个摄像头厂商的SDK，由于他们都用到了ffmpeg，大致是注册解码器的时候产生了冲突，导致A.framework无法使用，Crash了。。。&lt;/p&gt;
&lt;p&gt;A.framework的工程师看完错误日志以后认为，是B.framework没有编译进xxx音频解码器，并且注册时机过早，导致A库注册失败，产生闪退。他给的解决方案是：&lt;br&gt;1、给他一些时间修改ffmpeg源码，调整注册解码器的时机。&lt;br&gt;2、让B库编译ffmpeg的时候加入xxx音频解码器。&lt;/p&gt;
&lt;p&gt;第一个方案听起来就很不放心，并且我也不太明白为什么注册非要改源码才可以？？&lt;br&gt;考虑到传统厂商的反应速度与沟通成本，在方案二的实施过程中，尝试了一下动态库的按需加载。&lt;/p&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://blog.0x5e.cn/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="iOS" scheme="https://blog.0x5e.cn/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS 10 跳转系统设置</title>
    <link href="https://blog.0x5e.cn/2017/03/04/ios-10-jump-to-system-setting/"/>
    <id>https://blog.0x5e.cn/2017/03/04/ios-10-jump-to-system-setting/</id>
    <published>2017-03-04T23:32:37.000Z</published>
    <updated>2019-03-15T09:22:40.598Z</updated>
    
    <content type="html"><![CDATA[<p>在iOS 10之前，跳转到系统设置的地址是<code>prefs:root=XXXX</code>，这个地址在iOS 10之后失效了。去年查了很多资料，都说是苹果不让用了。<br>今年发现米家的更新日志里有一条：优化Wi-Fi类设备连接跳转功能<br>其实就是改了下规则，变为<code>App-Prefs:root=XXXX</code>。iOS 8~10 系统均可用:)</p><p>还有：<code>-[UIApplication openURL]</code>已Deprecated，记得用<code>-[UIApplication openURL:options:completionHandler:]</code>代替</p><a id="more"></a><h3 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#define iOS10 ([[UIDevice currentDevice].systemVersion doubleValue] &gt;= 10.0)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSURL</span> * url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"App-Prefs:root=WIFI"</span>];</span><br><span class="line"><span class="keyword">if</span> ([[<span class="built_in">UIApplication</span> sharedApplication] canOpenURL:url]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (iOS10) &#123;</span><br><span class="line">        [[<span class="built_in">UIApplication</span> sharedApplication] openURL:url options:@&#123;&#125; completionHandler:<span class="literal">nil</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [[<span class="built_in">UIApplication</span> sharedApplication] openURL:url];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="http://iphonedevwiki.net/index.php/Preferences.app" target="_blank" rel="noopener">Private URL Scheme</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在iOS 10之前，跳转到系统设置的地址是&lt;code&gt;prefs:root=XXXX&lt;/code&gt;，这个地址在iOS 10之后失效了。去年查了很多资料，都说是苹果不让用了。&lt;br&gt;今年发现米家的更新日志里有一条：优化Wi-Fi类设备连接跳转功能&lt;br&gt;其实就是改了下规则，变为&lt;code&gt;App-Prefs:root=XXXX&lt;/code&gt;。iOS 8~10 系统均可用:)&lt;/p&gt;
&lt;p&gt;还有：&lt;code&gt;-[UIApplication openURL]&lt;/code&gt;已Deprecated，记得用&lt;code&gt;-[UIApplication openURL:options:completionHandler:]&lt;/code&gt;代替&lt;/p&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://blog.0x5e.cn/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="iOS" scheme="https://blog.0x5e.cn/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS运行时更改App语言</title>
    <link href="https://blog.0x5e.cn/2017/01/22/ios-runtime-change-language/"/>
    <id>https://blog.0x5e.cn/2017/01/22/ios-runtime-change-language/</id>
    <published>2017-01-22T23:25:42.000Z</published>
    <updated>2019-03-15T09:22:40.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>主要是方便研发与测试同学的使用，便于验证App在不同语言下的显示效果，希望能够在现有工程不改变大量代码的情况下，尽量满足下面的需求</p><ul><li>不重启App</li><li>不改变调用方式（仍然用<code>NSLocalizedString</code>）</li><li>可设置默认语言</li><li>缺失语言提醒/警告</li><li>仅在<code>DEBUG</code>环境生效，不能影响生产环境</li><li>对<code>UIWebView</code>、<code>UIBarButtonItem</code>、<code>UIPasteboard</code>等系统组件也能够生效</li></ul><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>多语言文件会被存放在<code>&lt;App Bundle Path&gt;/&lt;Language Id&gt;.lproj/</code>下，其中<code>*.string</code>在工程中是<code>&quot;key&quot; = &quot;value&quot;;</code>的文本形式，编译后实际上是二进制的plist文件，可以用<code>plutil -p /path/to/xxx.strings</code>查看。</p><p>关于语言和地区ID：<br><a href="https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPInternational/LanguageandLocaleIDs/LanguageandLocaleIDs.html" target="_blank" rel="noopener">Language and Locale IDs - Apple Developer</a></p><p>项目里用到webview的地方很多，访问不同的页面时也需要支持<code>Accept-Language</code>的切换。</p><p>虽然是个蛮小的需求，但是网上找的些方法暂时还满足不了（也有可能我搜索姿势不太对）</p><h3 id="现有方案"><a href="#现有方案" class="headerlink" title="现有方案"></a>现有方案</h3><h4 id="1、更改-NSUserDefaults中AppleLanguages字段的值"><a href="#1、更改-NSUserDefaults中AppleLanguages字段的值" class="headerlink" title="1、更改 NSUserDefaults中AppleLanguages字段的值"></a>1、更改 <code>NSUserDefaults</code>中<code>AppleLanguages</code>字段的值</h4><p>这是比较被推荐的办法，缺点是重启应用后才生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[NSUserDefaults standardUserDefaults] setObject:[NSArray arrayWithObjects:@&quot;en&quot;, nil] forKey:@&quot;AppleLanguages&quot;];</span><br><span class="line">[[NSUserDefaults standardUserDefaults] synchronize];</span><br></pre></td></tr></table></figure><h4 id="2、替换NSLocalizedString宏"><a href="#2、替换NSLocalizedString宏" class="headerlink" title="2、替换NSLocalizedString宏"></a>2、替换<code>NSLocalizedString</code>宏</h4><p>首先实现一个运行时获取多语言文案的方法，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@implementation NSBundle (RunTimeLanguage)</span><br><span class="line"></span><br><span class="line">+ (NSString *)runTimeLocalizedStringForKey:(NSString *)key &#123;</span><br><span class="line">// TODO</span><br><span class="line">NSString *languageId = @&quot;en&quot;;</span><br><span class="line"></span><br><span class="line">NSString *path = [[NSBundle mainBundle] pathForResource: languageId ofType:@&quot;lproj&quot;];</span><br><span class="line">    NSBundle *languageBundle = [NSBundle bundleWithPath:path];</span><br><span class="line">    return [languageBundle localizedStringForKey:key value:key table:nil];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>然后在<code>PrefixHeader.pch</code>中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#undef NSLocalizedString</span><br><span class="line">#define NSLocalizedString(key, comment) [NSBundle runTimeLocalizedStringForKey:key]</span><br></pre></td></tr></table></figure><p>缺点是需要在预编译头文件里添加内容，感觉不太优雅。还有这样对webview不生效。</p><h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><p>方法一使用的是系统的选取多语言方法，不重启应用切换语言的功能看似无法支持。<br>方法二的实现会导致webview等系统组件仍然使用了系统语言。</p><p>感觉两个方法有点冲突- -ll</p><p>争取在假期里完成这个三方库</p><p>（有人说todo就是再也不do，希望不是这个样子😊）</p><p>不管怎样，去年的指标在年前算是补上了：）@桃小七</p><hr><h3 id="Update-2017-1-24"><a href="#Update-2017-1-24" class="headerlink" title="Update 2017/1/24"></a>Update 2017/1/24</h3><p>将方案一和方案二做了个合并，仿照<code>设置 &gt; 通用 &gt; 语言与地区 &gt; iPhone 语言</code>做了一个高仿的<code>GSLanguagePickerController</code>。</p><p><a href="https://github.com/0x5e/GSLanguagePickerController" target="_blank" rel="noopener">0x5e/GSLanguagePickerController</a></p><ol><li>修改语言，保存至<code>NSUserDefaults</code>，重启后全局生效</li><li>替换<code>-[NSBundle localizedStringForKey:value:table:]</code>方法，在重启应用前尽可能的支持多语言</li></ol><p>不是很完美，然而有总比没有好。。</p><p>现在可以达到的效果是：</p><table><thead><tr><th>一个普通标题</th><th style="text-align:center">立刻生效</th><th style="text-align:center">重启应用后生效</th></tr></thead><tbody><tr><td>NSLocalizedString</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td>UIBarButtonItem</td><td style="text-align:center">√(*)</td><td style="text-align:center">√</td></tr><tr><td>UIWebView</td><td style="text-align:center">×</td><td style="text-align:center">√</td></tr></tbody></table><p>其中<code>UIBarButtonItem</code>等系统控件的多语言资源是从<code>UIKit.frameworks</code>里获取的，而<code>UIKit.frameworks/*.lproj</code>命名规则比较旧，有多种格式，会导致部分语言无法立刻生效。</p><ol><li><p><code>[English Name].lproj</code></p><p> Examples: <code>English.lproj</code>, <code>French.lproj</code>, <code>German.lproj</code>, <code>Spanish.lproj</code></p></li><li><p><code>[Language Id]_[Region Id].lproj</code></p><p> Examples: <code>zh_CN.lproj</code>, <code>zh_HK.lproj</code>, <code>zh_TW.lproj</code>, <code>en_GB.lproj</code></p></li><li><p><code>[Language Id]-[Script Id].lproj</code></p><p> Examples: <code>zh-Hans.lproj</code>, <code>zh-Hant.lproj</code>, <code>es-ES.lproj</code></p></li></ol><p>前两种是已被弃用的规则，但是<code>UIKit.frameworks</code>、<code>InternationalSettings.bundle</code>等多处仍然存在，第三种是新规则，好像是iOS 9开始的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;主要是方便研发与测试同学的使用，便于验证App在不同语言下的显示效果，希望能够在现有工程不改变大量代码的情况下，尽量满足下面的需求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不重启App&lt;/li&gt;
&lt;li&gt;不改变调用方式（仍然用&lt;code&gt;NSLocalizedString&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;可设置默认语言&lt;/li&gt;
&lt;li&gt;缺失语言提醒/警告&lt;/li&gt;
&lt;li&gt;仅在&lt;code&gt;DEBUG&lt;/code&gt;环境生效，不能影响生产环境&lt;/li&gt;
&lt;li&gt;对&lt;code&gt;UIWebView&lt;/code&gt;、&lt;code&gt;UIBarButtonItem&lt;/code&gt;、&lt;code&gt;UIPasteboard&lt;/code&gt;等系统组件也能够生效&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://blog.0x5e.cn/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="iOS" scheme="https://blog.0x5e.cn/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Xcode控制台输出的编码问题</title>
    <link href="https://blog.0x5e.cn/2017/01/11/nslog-unicode/"/>
    <id>https://blog.0x5e.cn/2017/01/11/nslog-unicode/</id>
    <published>2017-01-11T21:54:01.000Z</published>
    <updated>2019-03-15T09:22:40.598Z</updated>
    
    <content type="html"><![CDATA[<p><code>NSLog</code>在打印集合对象的时候（<code>NSDictionary</code>/<code>NSArray</code>/<code>NSSet</code>），如果集合中的元素有中文字符，直接打印集合对象会被转义。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSDictionary *dict = @&#123;@&quot;chinese&quot;: @&quot;中文&quot;&#125;;</span><br><span class="line">NSLog(@&quot;%@&quot;, dict);</span><br></pre></td></tr></table></figure><p>打印结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2017-01-11 22:05:42.701095 xctest[4258:8003944] &#123;</span><br><span class="line">    chinese = &quot;\U4e2d\U6587&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StackOverflow上说，这是因为Foundation框架默认用的是<code>UTF-16</code>格式，导致<code>NSLog</code>打印C字符串的时候，非ASCII字符会被转义。（<a href="http://stackoverflow.com/questions/720052/nslog-incorrect-encoding" target="_blank" rel="noopener">NSLog incorrect encoding</a>）</p><p>原本在Xcode8之前可以用插件解决这个问题，插件会对输出的日志进行反转义，丝毫不会影响到项目代码。然而Xcode8禁止了自定义插件的使用🙄，现在插件只能对文本区做一些操作，局限性很高。。。</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><code>NSDictionary</code>与<code>description</code>相关的方法总共有三个：</p><ul><li><code>- [NSDictionary description]</code></li><li><code>- [NSDictionary descriptionWithLocale:]</code></li><li><code>- [NSDictionary descriptionWithLocale:indent:]</code></li></ul><p>前面两个的实现很好猜：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (NSString *)description &#123;</span><br><span class="line">    return [self descriptionWithLocale:nil];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSString *)descriptionWithLocale:(NSLocale *)locale &#123;</span><br><span class="line">    return [self descriptionWithLocale:locale indent:0];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSString *)descriptionWithLocale:(NSLocale *)locale indent:(NSUInteger)level &#123;</span><br><span class="line">// ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尝试用Hopper打开<code>CoreFoundation.framework</code>看了一下，第三个方法是调用了CFString函数进行的组装，问题应该出在这里。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>1、Xcode插件（Xcode 8之前可以）<br>2、重写集合对象的<code>descriptionWithLocale:indent:</code>方法（参考：<a href="https://github.com/apple/swift-corelibs-foundation/" target="_blank" rel="noopener">swift-corelibs-foundation</a>）<br>3、找到NSLog最终调用的打印函数，用fishhook替换c函数，在打印之前把<code>\Uxxxx</code>转换回来，（脑洞大开一下）<br>4、避免集合对象的直接打印，使用自定义方法，打印前转成JSON字符串（对现有项目，改动较大）</p><p>最后我选择了方案2，参考苹果开源的NSDictionary.swift重写了<code>descriptionWithLocale:indent:</code>方法，顺便把NSDictionary打印的其它问题一并解决了。<a href="http://cocoapods.org/pods/NSObject+NSLog" target="_blank" rel="noopener">NSObject+NSLog</a></p><hr><h2 id="NSLog打印NSDictionary存在的问题"><a href="#NSLog打印NSDictionary存在的问题" class="headerlink" title="NSLog打印NSDictionary存在的问题"></a>NSLog打印NSDictionary存在的问题</h2><ul><li>unicode编码（就前面说的）</li><li>嵌套缩进</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2017-01-14 10:11:28.448512 xctest[19360:9004384] &#123;</span><br><span class="line">    dict =     &#123;</span><br><span class="line">        dict2 =         &#123;</span><br><span class="line">            key = value;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多层嵌套的字典，<code>=</code>和<code>{</code>越离越远</p><ul><li>不同类型打印的格式不统一，有歧义</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// NSDictionary *dict = @&#123;@&quot;string&quot;: @&quot;0&quot;, @&quot;int&quot;: @(0), @&quot;double&quot;: @(0.1)&#125;;</span><br><span class="line">// NSLog(@&quot;%@&quot;, dict);</span><br><span class="line"></span><br><span class="line">2017-01-14 10:19:15.231084 xctest[19483:9007695] &#123;</span><br><span class="line">    double = &quot;0.1&quot;;</span><br><span class="line">    int = 0;</span><br><span class="line">    string = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串、整数、小数很难区分清楚</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;NSLog&lt;/code&gt;在打印集合对象的时候（&lt;code&gt;NSDictionary&lt;/code&gt;/&lt;code&gt;NSArray&lt;/code&gt;/&lt;code&gt;NSSet&lt;/code&gt;），如果集合中的元素有中文字符，直接打印集合对象会被转义。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSDictionary *dict = @&amp;#123;@&amp;quot;chinese&amp;quot;: @&amp;quot;中文&amp;quot;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;%@&amp;quot;, dict);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;打印结果为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2017-01-11 22:05:42.701095 xctest[4258:8003944] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    chinese = &amp;quot;\U4e2d\U6587&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;StackOverflow上说，这是因为Foundation框架默认用的是&lt;code&gt;UTF-16&lt;/code&gt;格式，导致&lt;code&gt;NSLog&lt;/code&gt;打印C字符串的时候，非ASCII字符会被转义。（&lt;a href=&quot;http://stackoverflow.com/questions/720052/nslog-incorrect-encoding&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NSLog incorrect encoding&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;原本在Xcode8之前可以用插件解决这个问题，插件会对输出的日志进行反转义，丝毫不会影响到项目代码。然而Xcode8禁止了自定义插件的使用🙄，现在插件只能对文本区做一些操作，局限性很高。。。&lt;/p&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://blog.0x5e.cn/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="iOS" scheme="https://blog.0x5e.cn/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>一年一度的2016总结</title>
    <link href="https://blog.0x5e.cn/2017/01/02/2016-summary/"/>
    <id>https://blog.0x5e.cn/2017/01/02/2016-summary/</id>
    <published>2017-01-02T13:34:52.000Z</published>
    <updated>2019-03-15T09:22:40.598Z</updated>
    
    <content type="html"><![CDATA[<p>讲到总结，我总是会回想起小学的时候，周一国旗下讲话，值周班同学的惯用开头：</p><blockquote><p>同学们，老师们，大家好<br>时光飞逝，岁月如梭<br>时间过得真快，一眨眼，愉快的一周又过去了……<br>在上一周里……<br>在新的一周里……</p></blockquote><p>（我的作文水平也就仅限于此了。。）</p><p>记得有一次期终考前，看到老师从内网ftp下载了考卷到教室的电脑里修改，于是偷偷背下了ip地址，心里一阵窃喜。。。放学之后飞奔回家，发现其实并不能打开╮(╯▽╰)╭</p><p>恩。。一眨眼，身边做老师的同学们已经在给学生出题了。。</p><a id="more"></a><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>今年的主要工作方向是物联网，从中学习并巩固了许多之前没接触过的知识，成长了许多。</p><h3 id="WiFi模块配网"><a href="#WiFi模块配网" class="headerlink" title="WiFi模块配网"></a>WiFi模块配网</h3><p>涉及手机、wifi模块、路由器、服务器四端的交互，让一个wifi模块从离线模式-&gt;连接路由器-&gt;连接服务端-&gt;接收app指令下发，感觉是很有趣的一件事儿，也是一个出了问题很难复现原因的事儿。</p><h3 id="SDK-amp-文档"><a href="#SDK-amp-文档" class="headerlink" title="SDK &amp; 文档"></a>SDK &amp; 文档</h3><p>向客户输出SDK的过程中，碰到过各种问题。</p><ul><li>稳定性。后期加上了单元测试，检查并修复了一些bug。</li><li>开发者没有按照我们期望的用法来调用，产生一些藏得很深的问题。需要对不合法参数做边界处理。比如初始化device对象的时候，如果入参devId有误，就直接返回nil。</li><li>避免三方库的引用冲突。比如AFNetworking有2.x和3.x版本不兼容，应该避免使用。如果开发者现有的app用了AF3.0，然后接入我们的SDK（依赖AF2.0），那就很尴尬了。</li><li>要易于集成。手工集成步骤多容易出错，后期改为Cocoapods集成。</li><li>简单易懂。我们的客户大部分是中小型企业，开发能力有限，需要提供完善的文档解释各种概念，提供每个功能的使用方法，代码示例。</li><li>方便调用。能不需要传入的参数，尽量不让开发者传入。不然增加理解成本。</li><li>兼容性。sdk升级后要尽可能兼容旧版本的调用方法，一些函数、属性名称也不要经常变动。否则开发者一升级版本就会找我们提问题，我们就得提供大半天的技术支持😔。</li></ul><h3 id="自动构建-amp-公版打包"><a href="#自动构建-amp-公版打包" class="headerlink" title="自动构建 &amp; 公版打包"></a>自动构建 &amp; 公版打包</h3><p>身在一个为客户提供“一天快速实现智能化”的公司里，自动构建也是很应景的对吧:-)</p><p>面对几十上百家的客户、两周一个版本的快速迭代，手工打包提测、每个客户的app都手工替换图标、名称，然后打包，这样就不太cool了，每天都是重复劳动不说，人力也完全不够的。。。于是乎我们把应用图标、启动图、应用名称、签名证书、各种入口的开关、常用的一些文案的修改，抽象到了一份配置文件中，交给后台管理，让产品同学自行上传素材、打包，解放开发同学的劳动力。虽然bug还是挺多，未来一定会逐步完善的。</p><h3 id="RN面板"><a href="#RN面板" class="headerlink" title="RN面板"></a>RN面板</h3><p>React Native今年很火，很幸运有机会能接触并运用到实际项目中。稍稍的学会了一些JS语法，RN基础控件的使用，flex布局等，动画和redux有待学习。</p><h2 id="业余时间"><a href="#业余时间" class="headerlink" title="业余时间"></a>业余时间</h2><h3 id="iOS重签名"><a href="#iOS重签名" class="headerlink" title="iOS重签名"></a>iOS重签名</h3><p>iOS编译和代码签名都被限制在macOS上完成，这样就很难和云服务建立起一些关联。。尝试过几个相关项目，isign、darling、vagrant，第一个无法通过macOS签名程序的验证（但据说可以安装），第二个缺少几个关键的系统库移植，第三个太臃肿了有种杀鸡用牛刀的感觉，不太想用。。未来如果有一天可以在linux上重签名甚至编译iOS应用的话，不知道会变成什么样子╮(╯▽╰)╭</p><h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><p>iPhone越狱后可以逆向别人家的app，再加上OC是门动态语言，用反编译工具基本可以看到绝大部分逻辑并且可读性很高（只要没有用swift或者c/c++的话）。成功的分析出了贪吃蛇大战的接口签名算法，并尝试刷分上了总榜第一名（第二天醒来已经进了黑名单。。）</p><h3 id="一些小脚本"><a href="#一些小脚本" class="headerlink" title="一些小脚本"></a>一些小脚本</h3><p>微信查看被删的好友</p><p>优酷会员宽带提速</p><p>停车场蓝牙开闸app-任意手机号注册、免费停车</p><p>iCloud钓鱼网站假数据填充器</p><p>airtake照片批量导出</p><p>iOS编译、重签名工具</p><p>（感叹一下python的三方库真的好多，大大的提升了效率，各种轮子都有现成的了^_^）</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>关于生活，印象比较深的两件事：</p><ul><li><p>桐乡的慢生活。在表姐和表姐夫的新家待了一下午，发现两人能共同拥有一个小家庭是多么幸福的事儿。阳台种着花花草草、各色各样的多肉植物，客厅放着慵懒的小曲儿，续上一小杯茶🍵，坐在有种咖啡店风格的房子里，听他们讲述每种茶的区别，手磨咖啡、吉他、旅游和其它。</p></li><li><p>久石让视听音乐会。以我的语文水平好像无法表达。。（卧槽，好听，好厉害好厉害😂）有机会的话每年都要去听😊</p></li></ul><p>经常做的几件事：</p><ul><li><p>再行路吃夜宵。几个人合伙要把一只浙大烟酒僧给灌醉这是每次的必备项目，乐此不彼。变着各种法子把烟酒僧留下、敬酒，再给醉醺醺的送回家。恩趁结婚之前多过过这样的娱乐项目☺️，以后等大家都结婚了机会就少了。</p></li><li><p>陪syt同学逛吃。有幸品尝了这么多好吃又好看的食物，如果没有女朋友我肯定是不会来也不会知道这些地方的^_^</p></li></ul><p>有待改善的几件事：</p><ul><li><p>脱发。挺明显的，每次洗完澡都能在下水道口看到满满的头发，两三次就可以把口子整个盖住😔。在听完理发师的建议（推销）后决定对这件事要重视起来，还是有挽回的机会的😂</p></li><li><p>身体虚。今年发生了三次因头痛而呕吐的情况，前两次并不知道原因以为可能是吃坏了或是中暑，第三次总结下来可能还是主要是头痛而引起的。主要发生在饭后，血液都跑去肚子里消化了，然后这时候出门容易让头忽冷忽热的，再然后就会觉得眼睛有点花看不清字，再然后眼睛很胀感觉眼压很高，再然后恶心想吐好难受🙄。年前已经去做了检查拍了片，年后去取报告再复查一下希望能把这个问题解决。。</p></li><li><p>不爱动。当然工作比较忙是个主要原因（主要借口）。不想去健身房可以考虑在家里多锻炼。。要像萧岚同学学习。可以先做些低强度的运动，希望。。能够。。坚持下来吧= =</p></li><li><p>做菜。丈母娘说了，结婚之前两个人都必须要会x道菜的。和爸妈住在一起没什么机会（借口）和动力学烧菜，有机会还是要尝试一下的。</p></li><li><p>牙疼。找个时间把智齿拔了😌</p></li></ul><h2 id="旅行"><a href="#旅行" class="headerlink" title="旅行"></a>旅行</h2><p>厦门again（16.02.02）：<br>排队吃了很好吃的烧人肉（烧肉人），和大学室友吃了海鲜自助餐，好赞，又逛了一遍厦门大学，去了植物园、沙滩🏖，住了厦门最高的酒店。并表示以后有能力的话每个旅游过的城市的最高处都想去一下/住一下（台北、高雄、厦门、湖州✅）</p><p>济州岛（16.04.02）：<br>度蜜月的好地方，可惜去的时候天气一般。有几条路的行道树是樱花🌸，开的好漂亮。真的是女生购物的好地方，免税店里人满为患，打开wifi列表可以翻十几页都找不到自己的随身wifi，并且就算找到了也连不上🙄。门口停了七八辆旅行社大巴，人多的有点害怕。。酒店服务很周到，服务员姐姐打扮的好精致好漂亮，满满的韩剧女主的感觉。去了好多博物馆：泰迪熊博物馆，HelloKitty博物馆，x博物馆。山君不离、森林🌲小火车、城山⛰日出峰……很小清新</p><p>16.06.10 &amp; 16.10.15 湖州back：<br>抽空回了两次湖州，回味一下以前在学校里约会、逛操场、垃圾街吃小吃、挤公交、逛街的感觉^_^很遗憾的是，傻子生煎搬走了，柠檬奶也没以前好喝了。。。</p><p>16.07.02 千岛湖公司活动：<br>涂鸦两周年，爬山、吃瓜🍉、千岛湖鱼头🐟，晚上庆功宴</p><p>16.07.23 富阳永安山滑翔：<br>体验了一把飞的感觉，在山顶上和教练背着滑翔伞往前冲，然后人就离地了飞起来了+_+，看着下面的田和小房子有种在坐飞机的感觉，大约5分钟后着陆，爽<del>~</del>~好想再来一次（如果不是那么贵的话）<br>ps:永安山的面包车司机一点不比秋名山的差</p><p>16.12.25 临安湍口温泉：<br>度假村还不错，入住一整天泡温泉不限次数，晚上9点去的时候人不多，每个池子泡了一遍然后醉醺醺的回去睡觉~<br>这里中餐馆的厨师还不错，恩，杭州西湖牛肉羹真的很好吃哈哈哈（被一旁的杭州人嫌弃了一脸）</p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p>在2017年计划做的事情：</p><ul><li>做好时间管理。不管在工作还是生活上，事情比较多的时候我总是会手忙脚乱，分不清优先级顺序，往往是看了哪个顺眼就先做哪个，或者哪个简单先做哪个，这样不太可取。“进程切换非常昂贵，避免多任务，保持单进程。”</li><li>多运动。先定他个小目标比如。。。~！@#￥%……&amp;*</li><li>北海道、西安、成都、日本韩国游轮，有时间再挑几个去去😂</li><li>把存了两年的小小金库拿出来，找点稳妥的项目投资一下。。</li><li>希望能保持一月一更的节奏，对学到的知识进行梳理、总结</li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>好了一篇耗时大半天的流水账式的年终总结又完成了，感谢各位观众朋友的收看，明年今天我们再会~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;讲到总结，我总是会回想起小学的时候，周一国旗下讲话，值周班同学的惯用开头：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;同学们，老师们，大家好&lt;br&gt;时光飞逝，岁月如梭&lt;br&gt;时间过得真快，一眨眼，愉快的一周又过去了……&lt;br&gt;在上一周里……&lt;br&gt;在新的一周里……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（我的作文水平也就仅限于此了。。）&lt;/p&gt;
&lt;p&gt;记得有一次期终考前，看到老师从内网ftp下载了考卷到教室的电脑里修改，于是偷偷背下了ip地址，心里一阵窃喜。。。放学之后飞奔回家，发现其实并不能打开╮(╯▽╰)╭&lt;/p&gt;
&lt;p&gt;恩。。一眨眼，身边做老师的同学们已经在给学生出题了。。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://blog.0x5e.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS代码签名与重签名</title>
    <link href="https://blog.0x5e.cn/2016/09/25/ios-codesign-things/"/>
    <id>https://blog.0x5e.cn/2016/09/25/ios-codesign-things/</id>
    <published>2016-09-25T22:59:56.000Z</published>
    <updated>2019-03-15T09:22:40.598Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个iOS开发者，与代码签名或设备配置文件打交道是不可避免的。</p><p>一个完好的iOS系统会验证App的签名、设备配置文件（Provisioning）、授权机制（Entitlements），来决定这个应用是否允许被安装、运行。</p><h2 id="证书和密钥"><a href="#证书和密钥" class="headerlink" title="证书和密钥"></a>证书和密钥</h2><p>在我们的开发机器上保存着私钥和对应的证书，证书是苹果认证部门进行签名过的、确保信息准确无误的。经过私钥签名后，iOS系统在安装的时候可以验证这个应用是否被第三方篡改过。<br>Mach-O二进制文件的签名保存在文件内部，其它资源文件的签名则保存在<code>Example.ipa =&gt; Payload/Example.app/_CodeSignatue/CodeResources</code>文件中，以plist的形式。</p><p>将证书导入到Keychain中，然后就可以用<code>codesign</code>命令行工具签名了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 签名</span><br><span class="line">$ codesign --force --sign &apos;iPhone Distribution: Hangzhou XXX Technology Co., LTD&apos; Example.app</span><br><span class="line"></span><br><span class="line"># 验证</span><br><span class="line">$ codesign --verify --verbose Example.app</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="授权机制（Entitlements）"><a href="#授权机制（Entitlements）" class="headerlink" title="授权机制（Entitlements）"></a>授权机制（Entitlements）</h2><p>Entitlements 算是一个配置列表，列出了这个应用一些基本信息（Bundle Id，Team Id, 开发/生产环境等）和申请的权限（推送，iCloud，调试等）。与 Xcode 的 Capabilities 选项卡对应。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span><br><span class="line">&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">        &lt;key&gt;application-identifier&lt;/key&gt;</span><br><span class="line">        &lt;string&gt;7TPNXN7G6K.ch.kollba.example&lt;/string&gt;</span><br><span class="line">        &lt;key&gt;aps-environment&lt;/key&gt;</span><br><span class="line">        &lt;string&gt;development&lt;/string&gt;</span><br><span class="line">        &lt;key&gt;com.apple.developer.team-identifier&lt;/key&gt;</span><br><span class="line">        &lt;string&gt;7TPNXN7G6K&lt;/string&gt;</span><br><span class="line">        &lt;key&gt;com.apple.developer.ubiquity-container-identifiers&lt;/key&gt;</span><br><span class="line">        &lt;array&gt;</span><br><span class="line">                &lt;string&gt;7TPNXN7G6K.ch.kollba.example&lt;/string&gt;</span><br><span class="line">        &lt;/array&gt;</span><br><span class="line">        &lt;key&gt;com.apple.developer.ubiquity-kvstore-identifier&lt;/key&gt;</span><br><span class="line">        &lt;string&gt;7TPNXN7G6K.ch.kollba.example&lt;/string&gt;</span><br><span class="line">        &lt;key&gt;com.apple.security.application-groups&lt;/key&gt;</span><br><span class="line">        &lt;array&gt;</span><br><span class="line">                &lt;string&gt;group.ch.kollba.example&lt;/string&gt;</span><br><span class="line">        &lt;/array&gt;</span><br><span class="line">        &lt;key&gt;get-task-allow&lt;/key&gt;</span><br><span class="line">        &lt;true/&gt;</span><br><span class="line">&lt;/dict&gt;</span><br><span class="line">&lt;/plist&gt;</span><br></pre></td></tr></table></figure><p>在配置文件（Provisioning）中也包含一个 Entitlements，两者要对应上才行，否则安装不了。配置文件是苹果开发者后台下载的，也是经过签名无法篡改的。这样的话，开发者就只能申请部分权限，不能越权操作了:)</p><h2 id="配置文件（Provisioning）"><a href="#配置文件（Provisioning）" class="headerlink" title="配置文件（Provisioning）"></a>配置文件（Provisioning）</h2><p>配置文件是经过苹果签名的、在苹果开发者平台生成的、经过CMS(Cryptographic Message Syntax) 加密的plist文件。它把签名、授权和沙盒联系到了一起。</p><p>配置文件是<code>.mobileprovision</code>格式的，被Xcode统一保存在<code>~/Library/MobileDevice/Provisioning Profiles/</code>目录下，文件名为Provisioning Profiles 的 UUID。</p><p>可以用OpenSSL或者macOS下的<code>security</code>工具进行解码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># macOS</span><br><span class="line">$ security cms -D -i example.mobileprovision</span><br><span class="line"></span><br><span class="line">$ openssl smime -inform der -verify -noverify -in example.mobileprovision</span><br></pre></td></tr></table></figure><p>输出内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span><br><span class="line">&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">&lt;key&gt;AppIDName&lt;/key&gt;</span><br><span class="line">&lt;string&gt;XC Wildcard&lt;/string&gt;</span><br><span class="line">&lt;key&gt;ApplicationIdentifierPrefix&lt;/key&gt;</span><br><span class="line">&lt;array&gt;</span><br><span class="line">&lt;string&gt;P4PX4Q7QS3&lt;/string&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;key&gt;CreationDate&lt;/key&gt;</span><br><span class="line">&lt;date&gt;2016-09-21T02:57:17Z&lt;/date&gt;</span><br><span class="line">&lt;key&gt;Platform&lt;/key&gt;</span><br><span class="line">&lt;array&gt;</span><br><span class="line">&lt;string&gt;iOS&lt;/string&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;key&gt;DeveloperCertificates&lt;/key&gt;</span><br><span class="line">&lt;array&gt;</span><br><span class="line">&lt;data&gt;.....(base64 format)&lt;/data&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;key&gt;Entitlements&lt;/key&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">&lt;key&gt;keychain-access-groups&lt;/key&gt;</span><br><span class="line">&lt;array&gt;</span><br><span class="line">&lt;string&gt;P4PX4Q7QS3.*&lt;/string&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;key&gt;get-task-allow&lt;/key&gt;</span><br><span class="line">&lt;false/&gt;</span><br><span class="line">&lt;key&gt;application-identifier&lt;/key&gt;</span><br><span class="line">&lt;string&gt;P4PX4Q7QS3.*&lt;/string&gt;</span><br><span class="line">&lt;key&gt;com.apple.developer.team-identifier&lt;/key&gt;</span><br><span class="line">&lt;string&gt;P4PX4Q7QS3&lt;/string&gt;</span><br><span class="line">&lt;/dict&gt;</span><br><span class="line">&lt;key&gt;ExpirationDate&lt;/key&gt;</span><br><span class="line">&lt;date&gt;2017-09-21T02:57:17Z&lt;/date&gt;</span><br><span class="line">&lt;key&gt;Name&lt;/key&gt;</span><br><span class="line">&lt;string&gt;universal_production&lt;/string&gt;</span><br><span class="line">&lt;key&gt;ProvisionsAllDevices&lt;/key&gt;</span><br><span class="line">&lt;true/&gt;</span><br><span class="line">&lt;key&gt;TeamIdentifier&lt;/key&gt;</span><br><span class="line">&lt;array&gt;</span><br><span class="line">&lt;string&gt;P4PX4Q7QS3&lt;/string&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;key&gt;TeamName&lt;/key&gt;</span><br><span class="line">&lt;string&gt;Hangzhou XXX Technology Co., LTD&lt;/string&gt;</span><br><span class="line">&lt;key&gt;TimeToLive&lt;/key&gt;</span><br><span class="line">&lt;integer&gt;365&lt;/integer&gt;</span><br><span class="line">&lt;key&gt;UUID&lt;/key&gt;</span><br><span class="line">&lt;string&gt;8822a242-ea6f-4392-a00a-e8669cb90f43&lt;/string&gt;</span><br><span class="line">&lt;key&gt;Version&lt;/key&gt;</span><br><span class="line">&lt;integer&gt;1&lt;/integer&gt;</span><br><span class="line">&lt;/dict&gt;</span><br><span class="line">&lt;/plist&gt;</span><br></pre></td></tr></table></figure><p>里面包含了很多信息，交给iOS逐项确认后，应用才会被安装、运行。这也是为什么未越狱的iOS系统如此安全的原因。从开发者账号、证书、权限一步步下来，都需要经过苹果逐项授权，弄不得半点假。</p><p><strong>相关链接：</strong></p><p><a href="https://objccn.io/issue-17-2/" target="_blank" rel="noopener">代码签名探析</a>（原版：<a href="https://www.objc.io/issues/17-security/inside-code-signing/" target="_blank" rel="noopener">Inside Code Signing</a>）</p><p><a href="http://docs.apicloud.com/Dev-Guide/iOS-License-Application-Guidance" target="_blank" rel="noopener">iOS证书及描述文件制作流程</a></p><h2 id="Xcode的签名管理"><a href="#Xcode的签名管理" class="headerlink" title="Xcode的签名管理"></a>Xcode的签名管理</h2><p>Xcode 8 之前，签名是半自动管理的，编译时须指定参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CODE_SIGN_IDENTITY = &quot;iPhone Distribution: Hangzhou XXX Technology Co., LTD&quot;</span><br><span class="line">PROVISIONING_PROFILE = &quot;8822a242-ea6f-4392-a00a-e8669cb90f43&quot;</span><br></pre></td></tr></table></figure><p>其中<code>PROVISIONING_PROFILE</code>的值为 Provisioning Profile UUID（可选），如果为空，xcodebuild会在<code>~/Library/MobileDevice/Provisioning Profiles/</code>目录下自动匹配，找不到的话签名就失败了。</p><p>Xcode 8新增了自动签名管理，相应的，之前的半自动管理木有了，变成了全手动管理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 自动签名管理</span><br><span class="line">CODE_SIGN_IDENTITY = &quot;iPhone Distribution&quot;</span><br><span class="line">DEVELOPMENT_TEAM = P4PX4Q7QS3</span><br><span class="line"></span><br><span class="line"># 手动签名管理</span><br><span class="line">CODE_SIGN_IDENTITY = &quot;iPhone Distribution: Hangzhou XXX Technology Co., LTD&quot;</span><br><span class="line">PROVISIONING_PROFILE_SPECIFIER = &quot;P4PX4Q7QS3/universal_production&quot;</span><br></pre></td></tr></table></figure><p>自动签名管理：<code>CODE_SIGN_IDENTITY</code>不再需要指定具体的证书名称；<code>PROVISIONING_PROFILE</code>与<code>PROVISIONING_PROFILE_SPECIFIER</code>将不起作用。比较坑的一点是，如果 provisioning profile 指定的 bundle id 带有通配符，那么它将无法在自动签名管理下使用。。。</p><p>手动签名管理：<code>PROVISIONING_PROFILE_SPECIFIER</code>的值为 “Team Id” + “/“ + “Provisioning Profile Name”，必选项，不再可选了。。。</p><p><strong>相关链接：</strong></p><p><a href="https://pewpewthespells.com/blog/migrating_code_signing.html" target="_blank" rel="noopener">Migrating Code Signing Configurations to Xcode 8</a></p><p><a href="http://stackoverflow.com/questions/39500634/use-xcodebuild-xcode-8-and-automatic-signing-in-ci-travis-jenkins-environmen" target="_blank" rel="noopener">Use xcodebuild (Xcode 8) and automatic signing in CI (Travis/Jenkins) environments - StackOverflow</a></p><h2 id="重签名"><a href="#重签名" class="headerlink" title="重签名"></a>重签名</h2><p>由于业务需要，我们专门部署了一台内网的mac服务器用于自动打包，重签名。并且提供给产品同事一个后台，用于填写打包的素材，图标，名称，包名，证书之类。<br>Xcode 8的自动签名管理给我带来些麻烦，自动签名的使用前提是：登录苹果开发者账号。这一步未必能做到自动化，并且客户的账号密码理论上是不会，也不应该提供给我们的，尤其国外客户对这个看的比较重要。所以我们需要客户提供的是<code>.mobileprovision</code>和<code>.p12</code>两个文件。</p><p>之前每次给客户打包都是拉代码，替换完素材然后用xcodebuild重新编译+签名。最近才对代码签名有了大概的了解，其实xcodebuild也是调用codesign进行签名的，那么每次编译其实都是浪费时间，只要每个版本保存一份<code>.ipa</code>文件，替换完素材重新签名就可以了。</p><p><code>.ipa</code>本质是一个zip压缩包，解压出来大概是这样的目录结构：</p><ul><li>Payload<ul><li>Example.app<ul><li>_CodeSignature<ul><li>CodeResources</li></ul></li><li>Info.plist</li><li>embedded.mobileprovision</li><li>archived-expanded-entitlements.xcent</li><li>Example（Mach-O二进制文件）</li><li>…</li><li>资源文件</li></ul></li></ul></li></ul><p><code>CodeResources</code>保存了所有文件的签名，<code>Payload/Example.app/Example</code>是主程序，Entitlements包含在其中。<br><code>archived-expanded-entitlements.xcent</code>也是 Entitlements，只是这个文件是方便人们排查问题用的，改它应该是没什么用。<br>这里的<code>Info.plist</code>是压缩后的binary plist，可以用<code>plutil</code>或者python 的 biplist 库解析。<br><code>embedded.mobileprovision</code>就是前面说的配置文件。</p><p>需要注意的是，Bundle Id的更改（Info.plist）以及配置文件的替换，需要自己完成，<code>codesign</code>不负责这些。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 重签名</span><br><span class="line">$ codesign --force \</span><br><span class="line">--identifier com.tuya.example \</span><br><span class="line">--sign &apos;iPhone Distribution: Hangzhou XXX Technology Co., LTD&apos; \</span><br><span class="line">--entitlements entitlements.plist \</span><br><span class="line">--verbose \</span><br><span class="line">Payload/Example.app</span><br><span class="line"></span><br><span class="line"># 验证</span><br><span class="line">$ codesign --verify \</span><br><span class="line">--verbose \</span><br><span class="line">Payload/Example.app</span><br><span class="line"></span><br><span class="line"># 打包</span><br><span class="line">$ zip -yr Example.resigned.ipa Payload</span><br></pre></td></tr></table></figure><p><code>codesign</code>会从 Keychain中获取<code>--sign</code>指定的证书和密钥对应用重新签名，同时将Entitlements写入到Mach-O文件中，最后更新<code>CodeResources</code>签名。</p><p>纯手动签名管理:-)</p><p><strong>相关链接：</strong></p><p><a href="https://sholtz9421.wordpress.com/2012/06/08/digitally-resigning-ipa/" target="_blank" rel="noopener">Digitally resigning IPA</a></p><p><a href="http://www.ketzler.de/2011/01/resign-an-iphone-app-insert-new-bundle-id-and-send-to-xcode-organizer-for-upload/" target="_blank" rel="noopener">Resign an iPhone App, insert new Bundle ID and send to Xcode Organizer for Upload</a></p><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><p>因为<code>codesign</code>是macOS平台才有的命令行工具，所以只能部署在内网mac服务器上，采用轮询的方式从后台（部署在阿里云）获取打包配置信息，效率比较地下而且很容易出问题，比如网络不好啦，比如电源插头给同事拔去充电啦。。。如果能找到linux下的解决方案就好了。</p><p>找到几个不同方案，比较有意思的是，这三种的思路完全不同。第一个是python实现的，跨平台的iOS签名工具，第二个是linux下的darwin模拟层（是这么翻译的不），第三个是在linux下跑一个macOS虚拟机。</p><p>并没有太多时间去试，稍微试了一下，好像是不可用，有空再看看:-)</p><p><a href="https://github.com/saucelabs/isign" target="_blank" rel="noopener">saucelabs/isign</a>: Code sign iOS applications, without proprietary Apple software or hardware<br><a href="https://github.com/darlinghq/darling" target="_blank" rel="noopener">darlinghq/darling</a>: Darwin/macOS emulation layer for Linux <a href="http://www.darlinghq.org" target="_blank" rel="noopener">http://www.darlinghq.org</a><br><a href="https://github.com/kholia/OSX-KVM" target="_blank" rel="noopener">kholia/OSX-KVM</a>: Running Mac OS X El Capitan and macOS Sierra on QEMU/KVM</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个iOS开发者，与代码签名或设备配置文件打交道是不可避免的。&lt;/p&gt;
&lt;p&gt;一个完好的iOS系统会验证App的签名、设备配置文件（Provisioning）、授权机制（Entitlements），来决定这个应用是否允许被安装、运行。&lt;/p&gt;
&lt;h2 id=&quot;证书和密钥&quot;&gt;&lt;a href=&quot;#证书和密钥&quot; class=&quot;headerlink&quot; title=&quot;证书和密钥&quot;&gt;&lt;/a&gt;证书和密钥&lt;/h2&gt;&lt;p&gt;在我们的开发机器上保存着私钥和对应的证书，证书是苹果认证部门进行签名过的、确保信息准确无误的。经过私钥签名后，iOS系统在安装的时候可以验证这个应用是否被第三方篡改过。&lt;br&gt;Mach-O二进制文件的签名保存在文件内部，其它资源文件的签名则保存在&lt;code&gt;Example.ipa =&amp;gt; Payload/Example.app/_CodeSignatue/CodeResources&lt;/code&gt;文件中，以plist的形式。&lt;/p&gt;
&lt;p&gt;将证书导入到Keychain中，然后就可以用&lt;code&gt;codesign&lt;/code&gt;命令行工具签名了&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 签名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ codesign --force --sign &amp;apos;iPhone Distribution: Hangzhou XXX Technology Co., LTD&amp;apos; Example.app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 验证&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ codesign --verify --verbose Example.app&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://blog.0x5e.cn/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="iOS" scheme="https://blog.0x5e.cn/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>智能硬件配网/组网方案整理笔记</title>
    <link href="https://blog.0x5e.cn/2016/09/19/iot-wifi-config-notes/"/>
    <id>https://blog.0x5e.cn/2016/09/19/iot-wifi-config-notes/</id>
    <published>2016-09-19T01:48:39.000Z</published>
    <updated>2019-03-15T09:22:40.598Z</updated>
    
    <content type="html"><![CDATA[<p>今年的工作主要是和智能硬件相关，上半年在配网这方面花费了不少功夫，与硬件同事共同努力，兼容性稳定性都有较大提升。在此做一个大致的整理，叙述我所了解的各种配网的大致原理、流程。</p><p>名词解释：配网指的是，让智能硬件接入网络的过程。可以是互联网可以是局域网，应该没有太严格的定义吧。比较常见的有Wifi、蓝牙、ZigBee这些。ZigBee和手机端没有什么关联，蓝牙设备的搜索发现有标准协议，有线网关就不用说了插线就可以了，让Wifi通讯的智能硬件联网是一个有点难度的问题。</p><h2 id="WiFi配网"><a href="#WiFi配网" class="headerlink" title="WiFi配网"></a>WiFi配网</h2><p>以小米空气净化器为例，按照APP的添加设备流程，输入家里路由器的名称、密码，点击下一步，净化器就连上路由器了。记得第一次配网成功的时候，心里是百思不得其解，作了好多猜测：</p><ul><li>内置蓝牙模块？当时并没有开蓝牙</li><li>声波传输了ssid和密码？好像也并没有开声音</li><li>手机连上了设备的AP热点，然后发送完ssid、密码再切回路由器？iOS并不提供切换wifi的api（其实这就是AP配网了）</li></ul><p>很久以后才搞明白，原来这就是传说中的黑科技。。一键配网</p><a id="more"></a><h3 id="一键配网"><a href="#一键配网" class="headerlink" title="一键配网"></a>一键配网</h3><p>SmartConfig、EasyConnect、Esptouch、Airkiss……whatever, 各个厂商有自己不同的实现和名称，大致原理是差不多的</p><p>首先，通过硬件复位，让设备处于待配网状态。此时设备处于混杂模式，会捕获范围内所有网络数据包，进行分析。</p><p>然后在APP中输入路由器密码，点击开始，发送配网信息（SSID和密码）。设备从数据包中过滤出有用信息并解码，得到正确的SSID和密码，连接至路由器。</p><blockquote><p>从802.11帧格式分析中获知,无线信号监听方的角度来说,不管无线信道有没有加密,DA、SA、LENGTH 、LLC、SNAP、FCS字段总是暴露的，因此信号监听方可以从这6个字段获取有效信息.从发送方讲,由于操作系统的限制,如果采用广播只剩下LENGTH发送方可通过改变其所需要发送数据包的长度进行控制.所以只要指定出一套利用长度编码的通讯协议,就可利用数据包的Lenght字段进行数据传递;</p></blockquote><p>具体原理可见松哥博客：<a href="http://blog.csdn.net/flyingcys/article/details/49283273" target="_blank" rel="noopener">wifi一键配网smartconfige 原理及应用</a></p><p><strong>优点</strong>：用户操作方便，配网速度快，效率高。<br><strong>缺点</strong>：部分手机与低端路由器不兼容，广播包在发送或是接收的过程中被丢弃了。</p><p>时序图：</p><p><img src="smartconfig.svg" alt></p><h3 id="AP配网"><a href="#AP配网" class="headerlink" title="AP配网"></a>AP配网</h3><p>AP配网操作起来复杂的多，对用户很不友好，一般作为备选方案使用。</p><p>首先通过硬件复位，设备会开启AP热点，等待手机端连接。<br>然后手机连接wifi到设备热点，在APP中输入路由器名称、密码，点击开始。数据通过局域网发送到设备端。设备收到数据后主动断开热点，连接路由器。这时手机wifi被断开，也会自动去连接路由器。等手机和设备都连上以后，配网就成功了。</p><p><strong>优点</strong>：兼容性好，基本所有手机、路由器都能支持<br><strong>缺点</strong>：操作复杂，上了年纪的人估计真的不会用。。</p><p>时序图：</p><p><img src="apconfig.svg" alt></p><h2 id="Mesh组网方案"><a href="#Mesh组网方案" class="headerlink" title="Mesh组网方案"></a>Mesh组网方案</h2><p>Wifi Mesh网络的配网也可以使用SmartConfig。最终每个设备都运行在sta+ap模式，类似路由器中继/桥接的感觉。多个设备都配置上路由器之后，他们会互相进行协商，只留一个设备作为根节点连接到路由器，另外的设备作为子节点，形成一个树状图的结构。根节点会对数据包进行转发。BLE也可以用于Mesh组网。</p><p><img src="mesh.jpg" alt></p><p>这样的网络拓扑结构适合覆盖大面积的开放区域，因为二级三级节点不用直连路由器。同时网络流量可以做负载均衡等等，不会给根节点带来太大压力。传输功率、功耗、信号干扰方面也会有提升。</p><p>缺点吧。。感觉出问题的时候调试会很困难，链路太长了😂。。每个环节都有可能会出问题，不好定位。响应上可能也会略慢些。</p><p><a href="https://en.wikipedia.org/wiki/Wireless_mesh_network" target="_blank" rel="noopener">Wikipedia - Wireless mesh network</a></p><hr><p>还在和硬件同事联调中，到时候再来补充:-)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年的工作主要是和智能硬件相关，上半年在配网这方面花费了不少功夫，与硬件同事共同努力，兼容性稳定性都有较大提升。在此做一个大致的整理，叙述我所了解的各种配网的大致原理、流程。&lt;/p&gt;
&lt;p&gt;名词解释：配网指的是，让智能硬件接入网络的过程。可以是互联网可以是局域网，应该没有太严格的定义吧。比较常见的有Wifi、蓝牙、ZigBee这些。ZigBee和手机端没有什么关联，蓝牙设备的搜索发现有标准协议，有线网关就不用说了插线就可以了，让Wifi通讯的智能硬件联网是一个有点难度的问题。&lt;/p&gt;
&lt;h2 id=&quot;WiFi配网&quot;&gt;&lt;a href=&quot;#WiFi配网&quot; class=&quot;headerlink&quot; title=&quot;WiFi配网&quot;&gt;&lt;/a&gt;WiFi配网&lt;/h2&gt;&lt;p&gt;以小米空气净化器为例，按照APP的添加设备流程，输入家里路由器的名称、密码，点击下一步，净化器就连上路由器了。记得第一次配网成功的时候，心里是百思不得其解，作了好多猜测：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内置蓝牙模块？当时并没有开蓝牙&lt;/li&gt;
&lt;li&gt;声波传输了ssid和密码？好像也并没有开声音&lt;/li&gt;
&lt;li&gt;手机连上了设备的AP热点，然后发送完ssid、密码再切回路由器？iOS并不提供切换wifi的api（其实这就是AP配网了）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;很久以后才搞明白，原来这就是传说中的黑科技。。一键配网&lt;/p&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://blog.0x5e.cn/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="物联网" scheme="https://blog.0x5e.cn/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
      <category term="智能硬件" scheme="https://blog.0x5e.cn/tags/%E6%99%BA%E8%83%BD%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>iOS逆向工程实践</title>
    <link href="https://blog.0x5e.cn/2016/08/24/ios-hook-summary/"/>
    <id>https://blog.0x5e.cn/2016/08/24/ios-hook-summary/</id>
    <published>2016-08-24T23:27:47.000Z</published>
    <updated>2019-03-15T09:22:40.598Z</updated>
    
    <content type="html"><![CDATA[<p>借一次帮同学破解某奇葩的app的机会，初步了解并掌握了iOS逆向相关知识。</p><a id="more"></a><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>解出某个类似挖矿的app的通信协议，然后写个脚本自动挖矿</p><h2 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h2><p>开始一头雾水，app能挖矿？用了一段时间才大致了解他的原理。。</p><p>这个app需要通过蓝牙连接一个特定穿戴设备，保持设备运行，采集所谓的脑电波。。采集的时间越长，脑电波图形越好，最终数据上传到服务端，得分就越高。</p><p>置于奇葩的app做这事儿有什么意义。。分数可以换成虚拟货币，而这货币最终是买单的呢，其实里面还有个规则是发展下线，可以从下线的得分得到提成，然后每个人都需要花钱买这个穿戴设备才能采集图形，换取积分，所以钱最终是从下家买的设备这里来的，类似于。。。。你懂得</p><h2 id="逆向前的分析"><a href="#逆向前的分析" class="headerlink" title="逆向前的分析"></a>逆向前的分析</h2><p>先抓包看了一下网络请求，发现发送和接收的数据都经过base64编码了，解出来是一堆乱码，看来是加密过啦。（不然也不用写这篇文章了- -ll）</p><p>然后我先反编译安卓版本看了一下（这个有现成工具比较好搞），貌似是用爱加密加固过了，很多关键的函数都反编译失败了看不到，不过还是看到了一些线索：找到两个和AES、RSA相关的类名，以及一个getPubKey()函数，里面应该是RSA公钥。于是猜想数据应该是经过AES和RSA加密了。</p><p>于是碰到一个坑：python没法用公钥解密数据。。。搜了很久，解决方案都是一本正经地说，你不应该用私钥加密，公钥解密，这样做是不对的</p><p>(╯‵□′)╯︵┻━┻</p><p>对不对关我pis啊！！！@#￥%……&amp;*</p><p>一度怀疑我是不是做错了，是不是app里还藏了私钥（然而并没有）</p><p>花了大半天还是解决不了，最后用java写了个用公钥解密的类。。。</p><p>分析不下去了，那么开始逆向吧- -ll</p><h2 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h2><p>AppStore下载下来的ipa都是经过加密的，解压出.app，用<code>otool</code>可以看到二进制文件的信息里，有一个<code>cryptid</code>字段，1代表被加密，0就是没加密，解密的过程被称作脱壳</p><p>获取脱壳后的应用有两种途径：</p><ol><li><p>从PP助手等越狱市场下载越狱应用，比较省事，缺点是冷门app你不一定找得到（或是Surge这种特殊的app，应该不算冷门吧，但是越狱市场都是找不到的）</p></li><li><p>自行砸壳/脱壳，使用<a href="https://github.com/stefanesser/dumpdecrypted" target="_blank" rel="noopener">dumpdecrypted</a>、<a href="https://github.com/KJCracks/Clutch" target="_blank" rel="noopener">Clutch</a>工具（需要一台越狱的设备）砸壳后再用ssh、scp之类的拷贝到mac上，略为繁琐</p></li></ol><h2 id="重签名"><a href="#重签名" class="headerlink" title="重签名"></a>重签名</h2><p>按理越狱手机是没有这个问题的吧？。。可能9.3.3是不完美越狱的缘故</p><p>替换成有效的bundle_id, codesigning_identity, privisioning_profile，再对app重新打包，就可以在手机上安装了（包括非越狱设备）</p><p>这个过程可以用<a href="https://github.com/DanTheMan827/ios-app-signer" target="_blank" rel="noopener">iOS App Signer</a>实现，还算方便</p><h2 id="安装越狱相关工具"><a href="#安装越狱相关工具" class="headerlink" title="安装越狱相关工具"></a>安装越狱相关工具</h2><p>一大堆东西，有的没的反正能装的都装上吧。。</p><ul><li>iOSOpenDev（越狱开发环境）</li><li>theos（同上）</li><li><a href="http://www.cycript.org/" target="_blank" rel="noopener">cycript</a></li><li><a href="https://github.com/KJCracks/Clutch" target="_blank" rel="noopener">Clutch</a></li><li><a href="https://github.com/nygard/class-dump" target="_blank" rel="noopener">class-dump</a>（从Mach-O文件中，导出所有OC类的头文件）</li><li>mobiledevice（直接安装ipa到手机上）</li><li>ideviceinstaller（同上）</li><li><a href="https://github.com/KJCracks/yololib" target="_blank" rel="noopener">yololib</a>（将dylib注入到二进制文件，Hook App）</li><li>Hopper（Mac反编译工具）</li></ul><p>iOS版本太新还是蛮尴尬的，越狱相关的工具一般不会很快的更新，甚至有些都不维护了，再加上9.3.3是不完美越狱，导致部分工具不可用（cycript），部分教程不可参考，遇上了很多困难。</p><p>再由于我要破解的app是swift写的，class-dump不可用，iOSOpenDev新建的模板也没法直接用，亚历山大啊╮(╯▽╰)╭</p><h2 id="寻找要Hook的目标"><a href="#寻找要Hook的目标" class="headerlink" title="寻找要Hook的目标"></a>寻找要Hook的目标</h2><p>先列出app所有类名和方法名。class-dump、flex3、hopper这些都能用，其中class-dump可以直接导出所有头文件，不过暂不支持swift。</p><p>由于OC的runtime机制，方法都是动态的，如果像java那样直接混淆类名和方法名，在运行时动态调用方法就会出错吧。所以能从类名里获取到很多信息。</p><p>（希望以后能有这方面的加密工具，找到过几个相关的脚本感觉不是太可靠，并且需要修改代码配合混淆，有一定的开发量，不是很方便）</p><p>大致确定了几个目标：</p><ul><li><code>[SecurityUtil encryptAESData:app_key:]</code></li><li><code>[SecurityUtil decryptAESData:app_key:]</code></li><li><code>[MindAsset.RSAUtils addRSAPrivateKey:tagName:]</code></li><li><code>[MindAsset.RSAUtils addRSAPublicKey:tagName:]</code></li><li><code>[MindAsset.HttpManager uploadDataToAliyun:accessKeyId:secretKeyId:sucessblock:]</code></li></ul><p>我尝试的方案是：编写dylib注入到应用中，在应用初始化的时候，swizzle这几个方法，然后在设备日志里找到我打印的日志，分析线索</p><p>为什么不直接调试app呢(╯‵□′)╯︵┻━┻</p><p>我也不知道，试了一下调试不了。。有空再琢磨一下为什么</p><p>感觉直接调试会更方便</p><h2 id="开始Hook"><a href="#开始Hook" class="headerlink" title="开始Hook"></a>开始Hook</h2><p>新建Xcode项目，选择<code>CaptainHook Tweak</code>模板，<code>*.xm</code>是一个模板，可以用<code>%hook</code>、<code>%log</code>、<code>%orig</code>方便的对某个类的方法进行hook。</p><p>xm文件头部定义了一个error：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#error iOSOpenDev post-project creation from template requirements (remove these lines after completed) -- \</span><br><span class="line">Link to libsubstrate.dylib: \</span><br><span class="line">(1) go to TARGETS &gt; Build Phases &gt; Link Binary With Libraries and add /opt/iOSOpenDev/lib/libsubstrate.dylib \</span><br><span class="line">(2) remove these lines from *.xm files (not *.mm files as they&apos;re automatically generated from *.xm files)</span><br></pre></td></tr></table></figure><p>需要从你的<code>iOSOpenDev</code>目录里引入<code>libsubstrate.dylib</code>，然后把这段error注释掉就好了。在build的时候项目会跑一个脚本对这些标记进行替换，再用宏定义引入至<code>*.mm</code>文件中，编译成dylib。</p><p>xm文件用着不太习惯，没有语法高亮了。。直接像平时开发的时候那样加个category，自己写swizzle也可以。。</p><p><a href="http://iphonedevwiki.net/index.php/Logos" target="_blank" rel="noopener">xm文件写法-Logos</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">%hook SecurityUtil</span><br><span class="line"></span><br><span class="line">+ (id)encryptAESData:(id)data app_key:(id)key &#123;</span><br><span class="line">    </span><br><span class="line">    id result = %orig(data, key);</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;encryptAESData &apos;%@&apos; &apos;%@&apos; &apos;%@&apos;&quot;, data, key, result);</span><br><span class="line">    </span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (id)decryptAESData:(id)data app_key:(id)key &#123;</span><br><span class="line">    </span><br><span class="line">    id result = %orig(data, key);</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;decryptAESData &apos;%@&apos; &apos;%@&apos; &apos;%@&apos;&quot;, data, key, result);</span><br><span class="line">    </span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%end</span><br></pre></td></tr></table></figure><p>编译后在Products找到编译好的dylib，然后用yololib工具把它注入到Mach-O文件中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">→ ./yololib MindAsset hook.dylib</span><br><span class="line">2016-08-23 22:24:50.338 yololib[71513:1121551] dylib path @executable_path/hook.dylib</span><br><span class="line">2016-08-23 22:24:50.351 yololib[71513:1121551] dylib path @executable_path/hook.dylib</span><br><span class="line">Reading binary: MindAsset</span><br><span class="line"></span><br><span class="line">2016-08-23 22:24:50.351 yololib[71513:1121551] Thin 64bit binary!</span><br><span class="line">2016-08-23 22:24:50.351 yololib[71513:1121551] dylib size wow 56</span><br><span class="line">2016-08-23 22:24:50.352 yololib[71513:1121551] mach.ncmds 60</span><br><span class="line">2016-08-23 22:24:50.352 yololib[71513:1121551] mach.ncmds 61</span><br><span class="line">2016-08-23 22:24:50.352 yololib[71513:1121551] Patching mach_header..</span><br><span class="line">2016-08-23 22:24:50.352 yololib[71513:1121551] Attaching dylib..</span><br><span class="line"></span><br><span class="line">2016-08-23 22:24:50.352 yololib[71513:1121551] size 51</span><br><span class="line">2016-08-23 22:24:50.352 yololib[71513:1121551] complete!</span><br></pre></td></tr></table></figure><p>再把Mach-O和dylib一同复制回.app目录下，重新打包签名，装上手机运行，用Xcode或者命令行工具<code>idevicesyslog</code>查看手机运行日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Aug 29 00:15:48 iPhone7s MindAsset[11330] &lt;Warning&gt;: encryptAESData &apos;&#123;&quot;password&quot;:&quot;123456&quot;,&quot;version&quot;:&quot;1.0.22&quot;,&quot;mobile&quot;:&quot;18000000000&quot;,&quot;platform&quot;:&quot;iOS&quot;&#125;&apos; &apos;fucgqsdlefath&apos; &apos;YV4F2uYUK3BmM90at/5leyfsz7/OJ+V/k8WTyC0WYrP4M1zbSZdIP47XxuPaXXCsRRdCf0YeldRtMBwCbRNc9rTgNgTz+BGWQ/iaYubbVv71w8yMJ/gCDu8nL8ijoeKl&apos;</span><br><span class="line">Aug 29 00:15:48 iPhone7s MindAsset[11330] &lt;Warning&gt;: decryptAESData &apos;&lt;1c4e3425 bff4c6ec 525dd10b b3afc339 944337ff 9d5a2ef3 066d7e07 0d05bf22 8e623abf a80be7c1 555cd64c ba436103 61830f09 b34e99a1 a29f3d4a 0800ca50 effb627e baf387bf 00b8a175 7f3b3b97 93fcbb47 68984e88 8828f665 775af738 2620e5b8 53127e7b 4ba016bb c77b5ad6 e5ec0e20 640f6608 625fb4da 9078e1ed 5257e9da 192d55bc 1f3c4ffa 3679f358 5dd79f05 3b7652e4 de0f2e07 10f44396 bd8a1ec0 3a181590 6dccbee6 ddb96f8b bf9a22b5 4878833d ff624f0a 41377208 5532679e 5b5d6145 914d61ae 0fa42ca5 67807fa2 98775bd8 8badae71 be95363b ea22806c 49c7e0fc 11eb86fb 58e5a0af efc902e8 407bd0e0 019cc2bb 8a841c65&gt;&apos; &apos;5Mvk20CB&apos; &apos;&#123;&quot;status&quot;:0,&quot;data&quot;:&#123;&quot;uid&quot;:xxx,&quot;invitor_name&quot;:&quot;xxx&quot;,&quot;huanxin_id&quot;:&quot;xxx&quot;,&quot;huanxin_pwd&quot;:&quot;xxx&quot;,&quot;in_use_huanxin_customer&quot;:1,&quot;waiter_id&quot;:&quot;xxx&quot;,&quot;waiter_name&quot;:&quot;xxx&quot;&#125;&#125;&apos;</span><br></pre></td></tr></table></figure><p>Hook成功了，发现确实调用了AES方法，但是每次加密解密的aesKey都是会变的，看着像随机生成的，那么联想到apk文件里找到的RSA公钥，再对RSA的加解密方法hook一下看看</p><h2 id="C函数Hook"><a href="#C函数Hook" class="headerlink" title="C函数Hook"></a>C函数Hook</h2><p>之前查看了一下应用所有用到的类，没有第三方的加密库，那么我猜用的是系统自带的<code>SecKeyEncrypt</code>、<code>SecKeyDecrypt</code>方法</p><p>C函数也是可以hook滴，用facebook的<a href="https://github.com/facebook/fishhook" target="_blank" rel="noopener">fishhook</a>吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;fishhook/fishhook.h&gt;</span><br><span class="line">#import &lt;dlfcn.h&gt;</span><br><span class="line">#import &lt;CommonCrypto/CommonCrypto.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//SecKeyEncrypt</span><br><span class="line">static OSStatus (*orig_SecKeyEncrypt)(SecKeyRef, SecPadding, const uint8_t *, size_t, uint8_t *, size_t *);</span><br><span class="line">static OSStatus my_SecKeyEncrypt(</span><br><span class="line">                                 SecKeyRef key,</span><br><span class="line">                                 SecPadding padding,</span><br><span class="line">                                 const uint8_t *plainText,</span><br><span class="line">                                 size_t plainTextLen,</span><br><span class="line">                                 uint8_t *cipherText,</span><br><span class="line">                                 size_t *cipherTextLen) &#123;</span><br><span class="line"></span><br><span class="line">    OSStatus result = orig_SecKeyEncrypt(key, padding, plainText, plainTextLen, cipherText, cipherTextLen);</span><br><span class="line">    </span><br><span class="line">    NSData *cipherData = nil;</span><br><span class="line">    NSData *plainData = nil;</span><br><span class="line">//    NSData *cipherData = [NSData dataWithBytesNoCopy:cipherText length:cipherTextLen];</span><br><span class="line">//    NSData *plainData = [NSData dataWithBytesNoCopy:(void *)plainText length:plainTextLen];</span><br><span class="line">    NSLog(@&quot;SecKeyEncrypt SecPadding: %d, plainData: %@, cipherData: %@&quot;, padding, plainData, cipherData);</span><br><span class="line">    </span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//SecKeyDecrypt</span><br><span class="line">static OSStatus (*orig_SecKeyDecrypt)(SecKeyRef, SecPadding, const uint8_t *, size_t, uint8_t *, size_t *);</span><br><span class="line">static OSStatus my_SecKeyDecrypt(</span><br><span class="line">                                 SecKeyRef key,</span><br><span class="line">                                 SecPadding padding,</span><br><span class="line">                                 const uint8_t *cipherText,</span><br><span class="line">                                 size_t cipherTextLen,</span><br><span class="line">                                 uint8_t *plainText,</span><br><span class="line">                                 size_t *plainTextLen) &#123;</span><br><span class="line"></span><br><span class="line">    OSStatus result = orig_SecKeyDecrypt(key, padding, cipherText, cipherTextLen, plainText, plainTextLen);</span><br><span class="line">    </span><br><span class="line">    NSData *cipherData = nil;</span><br><span class="line">    NSData *plainData = nil;</span><br><span class="line">//    NSData *cipherData = [NSData dataWithBytesNoCopy:(void *)cipherText length:cipherTextLen];</span><br><span class="line">//    NSData *plainData = [NSData dataWithBytesNoCopy:plainText length:plainTextLen];</span><br><span class="line">    NSLog(@&quot;SecKeyDecrypt SecPadding: %d, cipherData: %@, plainData: %@&quot;, padding, cipherData, plainData);</span><br><span class="line">    </span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//CCCryptorCreate</span><br><span class="line">static CCCryptorStatus (*orig_CCCryptorCreate)(CCOperation, CCAlgorithm, CCOptions, const void *, size_t, const void *, CCCryptorRef *);</span><br><span class="line">static CCCryptorStatus my_CCCryptorCreate(</span><br><span class="line">                                          CCOperation op,</span><br><span class="line">                                          CCAlgorithm alg,</span><br><span class="line">                                          CCOptions options,</span><br><span class="line">                                          const void *key,</span><br><span class="line">                                          size_t keyLength,</span><br><span class="line">                                          const void *iv,</span><br><span class="line">                                          CCCryptorRef *cryptorRef) &#123;</span><br><span class="line"></span><br><span class="line">    CCCryptorStatus result = my_CCCryptorCreate(op, alg, options, key, keyLength, iv, cryptorRef);</span><br><span class="line">    </span><br><span class="line">    NSData *keyData = [NSData dataWithBytesNoCopy:(void *)key length:keyLength];</span><br><span class="line">    NSData *ivData = [NSData dataWithBytesNoCopy:(void *)iv length:keyLength];</span><br><span class="line">    NSLog(@&quot;CCCryptorCreate CCOperation: %d, CCAlgorithm: %d, CCOptions: %d, key: %@, iv: %@&quot;, op, alg, options, keyData, ivData);</span><br><span class="line">    </span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@implementation NSObject (FishHook)</span><br><span class="line"></span><br><span class="line">+ (void)load &#123;</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;fishhook start&quot;);</span><br><span class="line">    </span><br><span class="line">    orig_SecKeyEncrypt = dlsym(RTLD_DEFAULT, &quot;SecKeyEncrypt&quot;);</span><br><span class="line">    orig_SecKeyDecrypt = dlsym(RTLD_DEFAULT, &quot;SecKeyDecrypt&quot;);</span><br><span class="line">    orig_CCCryptorCreate = dlsym(RTLD_DEFAULT, &quot;CCCryptorCreate&quot;);</span><br><span class="line">    </span><br><span class="line">    rebind_symbols((struct rebinding[3])&#123;</span><br><span class="line">        &#123;&quot;SecKeyEncrypt&quot;, my_SecKeyEncrypt&#125;,</span><br><span class="line">        &#123;&quot;SecKeyDecrypt&quot;, my_SecKeyDecrypt&#125;,</span><br><span class="line">        &#123;&quot;CCCryptorCreate&quot;, my_CCCryptorCreate&#125;,</span><br><span class="line">//        &#123;&quot;SecKeyEncrypt&quot;, my_SecKeyEncrypt, (void *)orig_SecKeyEncrypt&#125;,</span><br><span class="line">//        &#123;&quot;SecKeyDecrypt&quot;, my_SecKeyDecrypt, (void *)orig_SecKeyDecrypt&#125;,</span><br><span class="line">    &#125;, 3);</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;fishhook end&quot;);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>反正就大概这么个意思。。。最后没有从这儿获得啥信息😷</p><p>拿手机日志和网络请求对比，就搞清楚每个接口的请求格式了。至于前面随机生成的aesKey，经RSA公钥加密，随网络请求藏在了HTTP Header中，Response也是一样。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>iOS的安全性被很多人给忽视了，没想到也是挺脆弱的。。</p><p>从这次尝试中发现还是有很多运气的成分的╮(╯▽╰)╭</p><p>首先要猜的到大概的关键词，找到加密解密相关类，然后hook看日志，再和网络请求的数据进行对比，最后搞清楚数据结构，写出伪造请求的脚本。</p><p>遇到的困难主要是：</p><ul><li>刚出的9.3.3不完美越狱，部分工具不可用</li><li>基本是纯swift写的app，没hook成功，用hopper看具体实现很困难，有点无从下手。。</li></ul><p>感觉应该有更好的方法，我的这个流程（编码，编译dylib，注入，打包，重签名，安装，看日志）太长了😷</p><p>有空继续研究</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;借一次帮同学破解某奇葩的app的机会，初步了解并掌握了iOS逆向相关知识。&lt;/p&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://blog.0x5e.cn/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="iOS" scheme="https://blog.0x5e.cn/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>遇到一个icloud钓鱼网站</title>
    <link href="https://blog.0x5e.cn/2016/07/09/fake-icloud/"/>
    <id>https://blog.0x5e.cn/2016/07/09/fake-icloud/</id>
    <published>2016-07-09T00:28:56.000Z</published>
    <updated>2019-03-15T09:22:40.598Z</updated>
    
    <content type="html"><![CDATA[<p>前两天同学打车，手机丢在车上了，然后比较坑的遇到了一个会演戏的司机，反正最终是被拿去卖掉了。然后最近收到条钓鱼短信说，您的手机已定位到正在附近专卖店刷机激活，请尽快前往icloud-xxxx.com拦截。心疼他😔，于是就想做点好事，给钓鱼网站塞点假数据进去，避免更多人上当受骗吧。总有不太明白的年长的人会受骗的。。。</p><p>很快写了<code>fake_icloud.py</code> 1.0版本往钓鱼网站不停的塞呀塞数据😁，后来觉得随机生成的账号好像有点假，大小写字母+数字<a href="mailto:+@icloud.com" target="_blank" rel="noopener">+@icloud.com</a>，太假了。。然后改成7-11位数字<a href="mailto:+@qq.com" target="_blank" rel="noopener">+@qq.com</a>，这下难过滤了吧，继续刷😊</p><p>然后觉得如果网站记录了我的ip的话，那基本就没啥作用了。不过看这网站竟然是ASP.NET写的，真是好多年没听说过了。。于是又修改了<code>X-Forwarded-For</code>字段，如果能伪造IP那是最好不过了，不能也就算了，就塞点垃圾进去吧😌</p><p>在写的过程中，我去查了一下域名的备案信息，所有人的姓名，邮箱，然后用邮箱查到他注册了一两千个域名，卧勒个去。。qq号介绍里看了一下，貌似是做黑产的？把两千个域名导出，乱七八糟的域名就不管了，手工筛选了和<code>apple</code>,<code>icloud</code>,<code>iphone</code>字段相关的域名，又发现了几个完全一样的钓鱼站</p><p>第二天起来发现请求全都被重定向到百度和腾讯首页了。。。直接用ip访问，有反应但是报错，然后找了另一个域名继续发。后来又发现ip直接请求那个登陆接口也是可以的，那不用域名了。</p><p>最后整理了几个ip，写了3.0多线程版本，给同学也发了一份，又发送了一整天，下午发现服务器已经关了，233333</p><p>碰到我这样咸的蛋疼的人是不是有些倒霉啊，哈哈</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前两天同学打车，手机丢在车上了，然后比较坑的遇到了一个会演戏的司机，反正最终是被拿去卖掉了。然后最近收到条钓鱼短信说，您的手机已定位到正在附近专卖店刷机激活，请尽快前往icloud-xxxx.com拦截。心疼他😔，于是就想做点好事，给钓鱼网站塞点假数据进去，避免更多人上当
      
    
    </summary>
    
      <category term="技术相关" scheme="https://blog.0x5e.cn/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>一次停车场蓝牙开闸系统的破解尝试(未完待续)</title>
    <link href="https://blog.0x5e.cn/2016/04/30/xingbei-crack/"/>
    <id>https://blog.0x5e.cn/2016/04/30/xingbei-crack/</id>
    <published>2016-04-30T13:18:00.000Z</published>
    <updated>2019-03-15T09:22:40.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>为了相应G20的号召，2016年初开始，每天都有尽职的警察蜀黍贴罚单，路边违停成本大幅上升…只能每天停在地下车库了😔。</p><p>收费的小哥看我天天来停，推荐我用”行呗App”，可以用蓝牙开闸，支付宝付钱(真不是广告)。看着挺神奇的，就很想把它的蓝牙开闸原理搞明白。</p><h2 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h2><h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><p>多次折腾以后发现iOS一个抓包神器:<code>Replica</code>，是<code>Surge</code>作者开发的网络调试工具，超赞☺️</p><p>用法和Surge差不多，打开以后日志里会记录Http请求的所有信息和内容(与Surge相比，多了请求和返回的数据内容)</p><a id="more"></a><p>发现若干条相关信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//获取入口钥匙</span><br><span class="line">http://chargerest.park1.cn/BackgroundApp/parkingEntrance/getEntranceKey.do</span><br><span class="line"></span><br><span class="line">//Request Body:</span><br><span class="line">&#123;&quot;carParkId&quot;: 123456,&quot;userPhoneId&quot;: &quot;appUser1234567890&quot;&#125;</span><br><span class="line"></span><br><span class="line">//Response Body</span><br><span class="line">&#123;&quot;orderType&quot;:1,&quot;errorcode&quot;:0,&quot;errorMessage&quot;:&quot;&quot;,&quot;systemTime&quot;:&quot;2016-04-28 10:20:15 4&quot;,&quot;keyData&quot;:&quot;7t7p8jaZ31XK+ijUrzRvTeSomXDzRAqlhaCa5xwoxQ=&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//获取出口钥匙</span><br><span class="line">http://chargerest.park1.cn/BackgroundApp/parkingExport/getExportKey.do</span><br><span class="line"></span><br><span class="line">//Request Body:</span><br><span class="line">&#123;&quot;carParkId&quot;: 123456,&quot;userPhoneId&quot;: &quot;appUser1234567890&quot;&#125;</span><br><span class="line"></span><br><span class="line">//Response Body</span><br><span class="line">&#123;&quot;errorcode&quot;:0,&quot;errorMessage&quot;:&quot;出场临停用户发放KEY成功&quot;,&quot;systemTime&quot;:&quot;2016-04-28 18:20:15 4&quot;,&quot;keyData&quot;:&quot;AqlhXDzRoxQaCa5xwXK+ijUrzRvTeSo7t7p8jaZ31m=&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//还有两条入口和出口开启成功的请求,应该是和计费相关的</span><br><span class="line">http://chargerest.park1.cn/BackgroundApp/parkingExport/exportOpenSuccess.do</span><br></pre></td></tr></table></figure><p><code>keyData</code>应该就是蓝牙开闸的钥匙了。</p><h3 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h3><p><code>keyData</code>肯定是加密过的，不然也太容易了吧..(恩..想想也是)</p><p>再换位思考一下，既然都加密了，那<code>systemTime</code>肯定也会用到的..不然传给我做啥= =ll</p><p>这里用到了<code>jadx-gui</code>进行安卓版本的反编译，勾上<code>Tools-&gt;Deobfuscation</code>可以起到一定程度的反混淆</p><p>用<code>getExportKey</code>，<code>keyData</code>，<code>systemTime</code>，<code>userPhoneId</code>，<code>Bluetooth</code>等关键字做了大量的搜索与整理,理清了大致开闸流程如下:</p><ol><li>进入停车场之前，app里点击开闸按钮，手机会搜索附近的蓝牙设备与广播，并获取广播内容(蓝牙4.0收发数据是可以不用与设备配对的)，解析出停车场名称，闸门名称，停车场id，闸门id，随后在手机上显示各个闸门的名称，供用户选择。这个过程不需要联网。</li><li>选定闸门后，会进行网络请求获取<code>keyData</code>，然后进行各种解密和移位操作。总结了一下，入参为<code>keyData</code>，<code>systemTime</code>，<code>userPhoneNo</code>(与<code>userPhoneId</code>对应,登录时获取)，闸门id(入口为0,出口为非0)，当前时间(年月日)，返回结果是一个byte数组。</li><li>将byte数组发送给闸门后，闸门开启，同时手机调用计费接口开始计费。</li><li>出场前缴费，后面流程和入场类似。</li></ol><h3 id="猜想"><a href="#猜想" class="headerlink" title="猜想"></a>猜想</h3><p>首先开闸应该是通过手机蓝牙发送数据，而不是通过网络请求。因为有些停车场也是有蓝牙开闸的，用的是一个带有纽扣电池的蓝牙小圆片。并且手机在开闸成功后调用了<code>xxxOpenSuccess.do</code>接口。</p><p>我猜测停车场和行呗都有计费系统，并且两个系统是相互独立的。(不然不需要手机调用开始计费的接口)</p><p>猜测后台流程如下:</p><ol><li>闸门获取到手机发出的key，然后分别去停车场后台与行呗后台查询，是否放行。</li><li>放行后，行呗后台会计时，停车场后台可能也会计时。</li><li>出场前缴费。</li><li>出场时闸门取到key，从任意一个后台查到已缴费，即可放行。</li></ol><h2 id="结果-待验证"><a href="#结果-待验证" class="headerlink" title="结果(待验证)"></a>结果(待验证)</h2><p>因为计费仍然是通过手机调用接口，如果把该请求拦截了，在出场之前才发送，那么会造成行呗后台计费时间不准确，可以达到近乎免费的效果😳。</p><p>五一回来后去试一下..真可以的话…嘻嘻..我什么也不知道☺️</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul><li>将各个停车场和行呗的计费系统合并(难度有点大)</li><li>用手机网络请求开闸，然后行呗后台再调用接口让停车场开闸(链路太长，稳定性会有问题，需要改造)</li><li>改为使用图像识别的开闸系统(这个…)</li><li>加大app的安全性(好像没什么效果)</li></ul><hr><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>2016/05/06:</p><p>几天测试下来,只需要在用app正常入场以后,再伪造出场记录(获取出场key,再调用停止计费接口,直接调用第二个接口会失败),然后在出场之前伪造入场记录,即可免费停车..</p><p>调用了一下找车位接口,发现杭州支持行呗蓝牙开闸的停车场还蛮多的,大大小小竟然有100多个🙄🙄🙄</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;为了相应G20的号召，2016年初开始，每天都有尽职的警察蜀黍贴罚单，路边违停成本大幅上升…只能每天停在地下车库了😔。&lt;/p&gt;
&lt;p&gt;收费的小哥看我天天来停，推荐我用”行呗App”，可以用蓝牙开闸，支付宝付钱(真不是广告)。看着挺神奇的，就很想把它的蓝牙开闸原理搞明白。&lt;/p&gt;
&lt;h2 id=&quot;经过&quot;&gt;&lt;a href=&quot;#经过&quot; class=&quot;headerlink&quot; title=&quot;经过&quot;&gt;&lt;/a&gt;经过&lt;/h2&gt;&lt;h3 id=&quot;抓包&quot;&gt;&lt;a href=&quot;#抓包&quot; class=&quot;headerlink&quot; title=&quot;抓包&quot;&gt;&lt;/a&gt;抓包&lt;/h3&gt;&lt;p&gt;多次折腾以后发现iOS一个抓包神器:&lt;code&gt;Replica&lt;/code&gt;，是&lt;code&gt;Surge&lt;/code&gt;作者开发的网络调试工具，超赞☺️&lt;/p&gt;
&lt;p&gt;用法和Surge差不多，打开以后日志里会记录Http请求的所有信息和内容(与Surge相比，多了请求和返回的数据内容)&lt;/p&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://blog.0x5e.cn/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS使用Fastlane多渠道自动化打包</title>
    <link href="https://blog.0x5e.cn/2016/04/16/ios-fastlane-build/"/>
    <id>https://blog.0x5e.cn/2016/04/16/ios-fastlane-build/</id>
    <published>2016-04-16T22:09:04.000Z</published>
    <updated>2019-03-15T09:22:40.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>由于需求的变化，公司打算将同一份App提供给不同的厂商，名称、图标、配色等由厂商自定义，内部称作公版App，随着客户越来越多，手工修改肯定是不满足要求的，必须得自动化。</p><p>之前一直在用python打企业包上传至蒲公英，xcodebuild用着还是有点复杂的。。后来发现了fastlane，好东西呀，还有好多功能有待尝试😊</p><a id="more"></a><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>先整理了一下需要自定义的部分，打算整理成一份配置文件，在打包之前自动替换各种资源文件和参数，然后自动打包，再上传到蒲公英：</p><ul><li>应用名称（多语言）</li><li>版本号</li><li>Bundle Id</li><li>URL Scheme</li><li>FAQ、隐私政策的地址</li><li>Copyright文案</li><li>配色方案（UED提供，导航栏、列表、提示、按钮等各种颜色、背景色）</li><li>平台AppKey、SceretKey</li><li>友盟AppKey</li><li>登录方式（手机、邮箱）、是否要支持第三方登录</li><li>第三方登录的各种Key</li><li>应用图标</li><li>启动图</li><li>其它图标</li></ul><p>参数与Android保持统一，方便以后服务端集成两方的自动打包脚本。</p><p>因为支持多语言，应用名称保存在<code>./项目名/*.lproj/InfoPlist.strings</code>中，<code>CFBundleDisplayName=xxx</code>, 可以直接新建文本来替换。</p><p>版本号、BundleId、URL Scheme等参数可用<code>/usr/libexec/PlistBuddy</code>进行替换。</p><p>配色方案我整理在一个plist文件里，也一样替换。</p><p>应用图标可以用python的PIL库切成各种尺寸的图直接替换，启动图由于比例有好多种，暂时先让客户提供了。</p><p>剩下所有参数以宏定义的方式整理在了一个头文件中，替换之☺️</p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><p>图片资源、配置参数替换之前用python已经写好了。fastlane主要用来打包签名上传，采用配置文件的形式显得清晰一些，可以稍微少写几行代码。</p><p>读取配置文件，转成字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">print(<span class="string">'usage: python package_ios.py [配置文件目录]'</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">config_dir = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./%s/config.json'</span> % config_dir) <span class="keyword">as</span> data_file:</span><br><span class="line"><span class="comment">#过滤注释。。。。</span></span><br><span class="line">data = data_file.read()</span><br><span class="line">array = data.split(<span class="string">'\n'</span>)</span><br><span class="line">data = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> array:</span><br><span class="line">data += a.split(<span class="string">'\t//'</span>)[<span class="number">0</span>] + <span class="string">'\n'</span></span><br><span class="line">config = json.loads(data)</span><br></pre></td></tr></table></figure><p>替换应用名称：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = codecs.open(<span class="string">'./TuyaSmart/zh-Hans.lproj/InfoPlist.strings'</span>,<span class="string">'w+b'</span>,<span class="string">'UTF-8'</span>)</span><br><span class="line">f.write(<span class="string">'CFBundleDisplayName="%s";'</span> % config[<span class="string">'app_name_cn'</span>])</span><br><span class="line">f.close()</span><br><span class="line">//...</span><br></pre></td></tr></table></figure><p>替换配色方案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_color</span><span class="params">(config)</span>:</span></span><br><span class="line"><span class="keyword">for</span> (key, value) <span class="keyword">in</span> config[<span class="string">'colors'</span>].items():</span><br><span class="line">os.system(<span class="string">'/usr/libexec/PlistBuddy -c "set %s %s" ./TuyaSmart/customColor.plist'</span> % (key, value))</span><br></pre></td></tr></table></figure><p>生成各个尺寸应用图标、替换启动图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_icon</span><span class="params">(config_dir)</span>:</span></span><br><span class="line">icon_path = <span class="string">'./%s/res/Icon.png'</span> % config_dir</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(icon_path):</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">img_orig = Image.open(icon_path).convert(<span class="string">'RGBA'</span>)</span><br><span class="line"></span><br><span class="line">dic = &#123;</span><br><span class="line"><span class="string">'Icon-29@2x.png'</span>: (<span class="number">58</span>, <span class="number">58</span>),</span><br><span class="line"><span class="string">'Icon-29@3x.png'</span>: (<span class="number">87</span>, <span class="number">87</span>),</span><br><span class="line"><span class="string">'Icon-40@2x.png'</span>: (<span class="number">80</span>, <span class="number">80</span>),</span><br><span class="line"><span class="string">'Icon-40@3x.png'</span>: (<span class="number">120</span>, <span class="number">120</span>),</span><br><span class="line"><span class="string">'Icon-60@2x.png'</span>: (<span class="number">120</span>, <span class="number">120</span>),</span><br><span class="line"><span class="string">'Icon-60@3x.png'</span>: (<span class="number">180</span>, <span class="number">180</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (name, size) <span class="keyword">in</span> dic.items():</span><br><span class="line">img = img_orig.resize(size, Image.ANTIALIAS)</span><br><span class="line">img.save(<span class="string">'./TuyaSmart/Images.xcassets/AppIcon.appiconset/%s'</span> % name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img_path = <span class="string">'./TuyaSmart/Images.xcassets/AppIcon.appiconset/Icon-60@2x.png'</span></span><br><span class="line"><span class="keyword">if</span> os.path.isfile(img_path):</span><br><span class="line">shutil.copy(img_path, <span class="string">'./TuyaSmart/业务/Base/Resource/'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_launch_img</span><span class="params">(config_dir)</span>:</span></span><br><span class="line">arr = [</span><br><span class="line"><span class="string">'01-login-preview-4.png'</span>,</span><br><span class="line"><span class="string">'01-login-preview-5s.png'</span>,</span><br><span class="line"><span class="string">'01-login-preview-6.png'</span>,</span><br><span class="line"><span class="string">'01-login-preview-6plus.png'</span>,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> arr:</span><br><span class="line">img_path = <span class="string">'./%s/res/%s'</span> % (config_dir, name)</span><br><span class="line"><span class="keyword">if</span> os.path.isfile(img_path):</span><br><span class="line">shutil.copy(img_path, <span class="string">'./TuyaSmart/Images.xcassets/LaunchImage.launchimage/'</span>)</span><br></pre></td></tr></table></figure><p>调用fastlane打包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.system(<span class="string">'fastlane Enterprise bundleId:%s'</span> % config[<span class="string">'packageName'</span>])</span><br></pre></td></tr></table></figure><h3 id="Fastfile配置"><a href="#Fastfile配置" class="headerlink" title="Fastfile配置"></a>Fastfile配置</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">ENTERPRISE_IDENTIFIER = <span class="string">'com.xxx.xxx.Hoc'</span></span><br><span class="line">ENTERPRISE_CODESIGNING_IDENTITY = <span class="string">'iPhone Distribution: xxxx'</span></span><br><span class="line"></span><br><span class="line">PLIST_FILE_PATH = <span class="string">'xxx/Info.plist'</span></span><br><span class="line"></span><br><span class="line">uKey = <span class="string">'xxxx'</span></span><br><span class="line">_api_key = <span class="string">'xxxx'</span></span><br><span class="line"></span><br><span class="line">before_all <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."</span></span><br><span class="line">  cocoapods</span><br><span class="line">  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">desc <span class="string">"使用方法 `fastlane Enterprise bundleId:&lt;Bundle Id&gt;`"</span></span><br><span class="line">lane <span class="symbol">:Enterprise</span> <span class="keyword">do</span> <span class="params">|options|</span></span><br><span class="line"></span><br><span class="line">  time = Time.new</span><br><span class="line">  date = <span class="string">"<span class="subst">#&#123;time.year&#125;</span>.<span class="subst">#&#123;time.month&#125;</span>.<span class="subst">#&#123;time.day&#125;</span>"</span></span><br><span class="line">  badge(<span class="symbol">shield:</span> <span class="string">"build-<span class="subst">#&#123;date&#125;</span>-blue"</span>)</span><br><span class="line"></span><br><span class="line">  bundleId = options[<span class="symbol">:bundleId</span>]</span><br><span class="line">  <span class="comment"># version = get_info_plist_value(path: PLIST_FILE_PATH, key: "CFBundleShortVersionString")</span></span><br><span class="line">  gym(</span><br><span class="line">    <span class="symbol">scheme:</span> <span class="string">"TuyaSmartPublic"</span>,</span><br><span class="line">    <span class="symbol">clean:</span> <span class="literal">true</span>,</span><br><span class="line">    <span class="symbol">silent:</span> <span class="literal">true</span>,</span><br><span class="line">    <span class="symbol">archive_path:</span> <span class="string">"./Build/<span class="subst">#&#123;bundleId&#125;</span>/"</span>,</span><br><span class="line">    <span class="symbol">output_directory:</span> <span class="string">"./Build/<span class="subst">#&#123;bundleId&#125;</span>/"</span>,</span><br><span class="line">    <span class="symbol">output_name:</span> <span class="string">"<span class="subst">#&#123;bundleId&#125;</span>-<span class="subst">#&#123;date&#125;</span>.ipa"</span>,</span><br><span class="line">    <span class="symbol">export_method:</span> <span class="string">"enterprise"</span>,</span><br><span class="line">    <span class="symbol">configuration:</span> <span class="string">"Release"</span>,</span><br><span class="line">    <span class="symbol">xcargs:</span> <span class="string">"PRODUCT_BUNDLE_IDENTIFIER=\"<span class="subst">#&#123;ENTERPRISE_IDENTIFIER&#125;</span>\""</span>,</span><br><span class="line">    <span class="symbol">codesigning_identity:</span> <span class="string">"<span class="subst">#&#123;ENTERPRISE_CODESIGNING_IDENTITY&#125;</span>"</span>,</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  sh <span class="string">"echo '上传至蒲公英...' curl -F 'file=@../Build/<span class="subst">#&#123;bundleId&#125;</span>/<span class="subst">#&#123;bundleId&#125;</span>-<span class="subst">#&#123;date&#125;</span>.ipa' -F 'uKey=<span class="subst">#&#123;uKey&#125;</span>' -F '_api_key=<span class="subst">#&#123;_api_key&#125;</span>' -F 'updateDescription=<span class="subst">#&#123;bundleId&#125;</span>' http://www.pgyer.com/apiv1/app/upload"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can define as many lanes as you want</span></span><br><span class="line"></span><br><span class="line">after_all <span class="keyword">do</span> <span class="params">|lane|</span></span><br><span class="line">  <span class="comment"># This block is called, only if the executed lane was successful</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># slack(</span></span><br><span class="line">  <span class="comment">#   message: "Successfully deployed new App Update."</span></span><br><span class="line">  <span class="comment"># )</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">error <span class="keyword">do</span> <span class="params">|lane, exception|</span></span><br><span class="line">  <span class="comment"># slack(</span></span><br><span class="line">  <span class="comment">#   message: exception.message,</span></span><br><span class="line">  <span class="comment">#   success: false</span></span><br><span class="line">  <span class="comment"># )</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>用<code>badge</code>可以给企业包的应用图标加标签，方便区分，很实用</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ul><li>“鼓励一下我们”的功能，需要跳转至App Store对应的地址<code>https://itunes.apple.com/app/id%@</code>，需要客户创建应用后从苹果后台获取App Id，很麻烦。后来找到一个接口可以根据Bundle Id查询App Id <code>https://itunes.apple.com/lookup?bundleId=%@</code>，解决了这个问题。</li><li>蒲公英文件的分块上传，当时对python和分块上传都不熟悉，找了好多代码，后来蒲公英开发文档里建议用curl分块上传。。</li><li>Bundle Id需要去苹果后台手动创建，目前打的都是企业包，给客户演示用的，如果公用一个Bundle Id，上传至蒲公英、fir.im都会被归到同一个地址去，没法做区分。这个暂时没时间解了，等服务端同学做出后台来吧😊</li></ul><h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h2><ul><li>codesigning、provisioning做成可配置（参照APICloud）</li><li>用jenkins持续集成</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.devlizy.com/ios-da-bao-quan-cheng-pei-zhi/" target="_blank" rel="noopener">iOS 持续集成之 fastlane + jenkins (持续更新)</a></p><p><a href="http://everettjf.github.io/2015/09/08/ios-ci-with-fastlane" target="_blank" rel="noopener">使用fastlane实现iOS持续集成</a></p><p><a href="http://ios.jobbole.com/82532/" target="_blank" rel="noopener">如何在运行时改变App的图标</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;由于需求的变化，公司打算将同一份App提供给不同的厂商，名称、图标、配色等由厂商自定义，内部称作公版App，随着客户越来越多，手工修改肯定是不满足要求的，必须得自动化。&lt;/p&gt;
&lt;p&gt;之前一直在用python打企业包上传至蒲公英，xcodebuild用着还是有点复杂的。。后来发现了fastlane，好东西呀，还有好多功能有待尝试😊&lt;/p&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://blog.0x5e.cn/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="iOS" scheme="https://blog.0x5e.cn/tags/iOS/"/>
    
  </entry>
  
</feed>
